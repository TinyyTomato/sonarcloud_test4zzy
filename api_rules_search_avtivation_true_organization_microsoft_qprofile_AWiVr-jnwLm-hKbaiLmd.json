{
    "total": 62,
    "p": 1,
    "ps": 100,
    "rules": [
        {
            "key": "apex:S5384",
            "repo": "apex",
            "name": "Business logic should not be implemented inside Triggers",
            "createdAt": "2019-08-21T15:36:47+0200",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eMoving the business logic out of Trigger functions and into dedicated \"Trigger Handler\" classes improves the application’s design:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e the code is easier to test and maintain. \u003c/li\u003e\n  \u003cli\u003e it helps avoiding some bugs such as trigger recursion. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe Trigger functions should only dispatch calls to the corresponding Trigger Handler classes. See the links below for examples of Trigger Handler\ndesigns.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a Trigger function contains one of the following syntax elements: loops, switch-case, try blocks, SOQL queries, DML\nqueries, SOSL queries. The goal is to detect Trigger functions which have a complex logic. In practice method calls and if statements are enough to\ndispatch records for processing.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\ntrigger MyTrigger on Account(after insert, after update) { // Noncompliant. The trigger is processing records itself instead of using a Trigger Handler.\n    for(Account a : Trigger.New) {\n        // ...\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://web.archive.org/web/20210509202306/https://github.com/ChrisAldridge/Lightweight-Trigger-Framework\"\u003eLightweight Apex Trigger\n  Framework\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://web.archive.org/web/20230130071426/https://meltedwires.com/2013/06/05/trigger-pattern-for-tidy-streamlined-bulkified-triggers-revisited/\"\u003eTrigger Pattern for Tidy, Streamlined, Bulkified Triggers Revisited\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eMoving the business logic out of Trigger functions and into dedicated \"Trigger Handler\" classes improves the application’s design:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e the code is easier to test and maintain. \u003c/li\u003e\n  \u003cli\u003e it helps avoiding some bugs such as trigger recursion. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe Trigger functions should only dispatch calls to the corresponding Trigger Handler classes. See the links below for examples of Trigger Handler\ndesigns.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a Trigger function contains one of the following syntax elements: loops, switch-case, try blocks, SOQL queries, DML\nqueries, SOSL queries. The goal is to detect Trigger functions which have a complex logic. In practice method calls and if statements are enough to\ndispatch records for processing.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\ntrigger MyTrigger on Account(after insert, after update) { // Noncompliant. The trigger is processing records itself instead of using a Trigger Handler.\n    for(Account a : Trigger.New) {\n        // ...\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://web.archive.org/web/20210509202306/https://github.com/ChrisAldridge/Lightweight-Trigger-Framework\"\u003eLightweight Apex Trigger\n  Framework\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://web.archive.org/web/20230130071426/https://meltedwires.com/2013/06/05/trigger-pattern-for-tidy-streamlined-bulkified-triggers-revisited/\"\u003eTrigger Pattern for Tidy, Streamlined, Bulkified Triggers Revisited\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://web.archive.org/web/20210509202306/https://github.com/ChrisAldridge/Lightweight-Trigger-Framework\"\u003eLightweight Apex Trigger\n  Framework\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://web.archive.org/web/20230130071426/https://meltedwires.com/2013/06/05/trigger-pattern-for-tidy-streamlined-bulkified-triggers-revisited/\"\u003eTrigger Pattern for Tidy, Streamlined, Bulkified Triggers Revisited\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
                },
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eMoving the business logic out of Trigger functions and into dedicated \"Trigger Handler\" classes improves the application’s design:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e the code is easier to test and maintain. \u003c/li\u003e\n  \u003cli\u003e it helps avoiding some bugs such as trigger recursion. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe Trigger functions should only dispatch calls to the corresponding Trigger Handler classes. See the links below for examples of Trigger Handler\ndesigns.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a Trigger function contains one of the following syntax elements: loops, switch-case, try blocks, SOQL queries, DML\nqueries, SOSL queries. The goal is to detect Trigger functions which have a complex logic. In practice method calls and if statements are enough to\ndispatch records for processing.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\ntrigger MyTrigger on Account(after insert, after update) { // Noncompliant. The trigger is processing records itself instead of using a Trigger Handler.\n    for(Account a : Trigger.New) {\n        // ...\n    }\n}\n\u003c/pre\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "MODULAR",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "apex:S3776",
            "repo": "apex",
            "name": "Cognitive Complexity of functions should not be too high",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.sonarsource.com/docs/CognitiveComplexity.pdf\"\u003eCognitive Complexity\u003c/a\u003e is a measure of how hard the control flow of a function\nis to understand. Functions with high Cognitive Complexity will be difficult to maintain.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.sonarsource.com/docs/CognitiveComplexity.pdf\"\u003eCognitive Complexity\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.sonarsource.com/blog/5-clean-code-tips-for-reducing-cognitive-complexity/\"\u003e5 Clean Code Tips for Reducing Cognitive\n  Complexity\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.sonarsource.com/docs/CognitiveComplexity.pdf\"\u003eCognitive Complexity\u003c/a\u003e is a measure of how hard the control flow of a function\nis to understand. Functions with high Cognitive Complexity will be difficult to maintain.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.sonarsource.com/docs/CognitiveComplexity.pdf\"\u003eCognitive Complexity\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.sonarsource.com/blog/5-clean-code-tips-for-reducing-cognitive-complexity/\"\u003e5 Clean Code Tips for Reducing Cognitive\n  Complexity\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "brain-overload"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [
                {
                    "key": "threshold",
                    "htmlDesc": "The maximum authorized complexity.",
                    "defaultValue": "15",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "LINEAR_OFFSET",
            "defaultDebtRemFnCoeff": "1min",
            "defaultDebtRemFnOffset": "5min",
            "effortToFixDescription": "per complexity point over the threshold",
            "debtOverloaded": false,
            "debtRemFnType": "LINEAR_OFFSET",
            "debtRemFnCoeff": "1min",
            "debtRemFnOffset": "5min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "LINEAR_OFFSET",
            "defaultRemFnGapMultiplier": "1min",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "LINEAR_OFFSET",
            "remFnGapMultiplier": "1min",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "gapDescription": "per complexity point over the threshold",
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.sonarsource.com/docs/CognitiveComplexity.pdf\"\u003eCognitive Complexity\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.sonarsource.com/blog/5-clean-code-tips-for-reducing-cognitive-complexity/\"\u003e5 Clean Code Tips for Reducing Cognitive\n  Complexity\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
                },
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003e\u003ca href\u003d\"https://www.sonarsource.com/docs/CognitiveComplexity.pdf\"\u003eCognitive Complexity\u003c/a\u003e is a measure of how hard the control flow of a function\nis to understand. Functions with high Cognitive Complexity will be difficult to maintain.\u003c/p\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "FOCUSED",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "apex:S1763",
            "repo": "apex",
            "name": "All code should be reachable",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003cp\u003eOnce control flow has been moved out of the current code block, any subsequent statements become effectively unreachable.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eJump statements (\u003ccode\u003ereturn\u003c/code\u003e, \u003ccode\u003ebreak\u003c/code\u003e, \u003ccode\u003econtinue\u003c/code\u003e) and \u003ccode\u003ethrow\u003c/code\u003e expressions move control flow out of the\ncurrent code block. So any statements that come after a jump are dead code.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nInteger foo(Integer a) {\n    Integer i \u003d 10;\n    return i + a; // Noncompliant\n    i++; // dead code\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nInteger foo(Integer a) {\n    Integer i \u003d 10;\n    return i + a; // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/561\"\u003eMITRE, CWE-561\u003c/a\u003e - Dead Code \u003c/li\u003e\n\u003c/ul\u003e",
            "mdDesc": "\u003cp\u003eOnce control flow has been moved out of the current code block, any subsequent statements become effectively unreachable.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eJump statements (\u003ccode\u003ereturn\u003c/code\u003e, \u003ccode\u003ebreak\u003c/code\u003e, \u003ccode\u003econtinue\u003c/code\u003e) and \u003ccode\u003ethrow\u003c/code\u003e expressions move control flow out of the\ncurrent code block. So any statements that come after a jump are dead code.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nInteger foo(Integer a) {\n    Integer i \u003d 10;\n    return i + a; // Noncompliant\n    i++; // dead code\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nInteger foo(Integer a) {\n    Integer i \u003d 10;\n    return i + a; // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/561\"\u003eMITRE, CWE-561\u003c/a\u003e - Dead Code \u003c/li\u003e\n\u003c/ul\u003e",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "unused"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/561\"\u003eMITRE, CWE-561\u003c/a\u003e - Dead Code \u003c/li\u003e\n\u003c/ul\u003e"
                },
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eJump statements (\u003ccode\u003ereturn\u003c/code\u003e, \u003ccode\u003ebreak\u003c/code\u003e, \u003ccode\u003econtinue\u003c/code\u003e) and \u003ccode\u003ethrow\u003c/code\u003e expressions move control flow out of the\ncurrent code block. So any statements that come after a jump are dead code.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nInteger foo(Integer a) {\n    Integer i \u003d 10;\n    return i + a; // Noncompliant\n    i++; // dead code\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nInteger foo(Integer a) {\n    Integer i \u003d 10;\n    return i + a; // Noncompliant\n}\n\u003c/pre\u003e"
                },
                {
                    "key": "introduction",
                    "content": "\u003cp\u003eOnce control flow has been moved out of the current code block, any subsequent statements become effectively unreachable.\u003c/p\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "apex:S2068",
            "repo": "apex",
            "name": "Hard-coded credentials are security-sensitive",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003cp\u003eBecause it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true\nfor applications that are distributed or that are open-source.\u003c/p\u003e\n\u003cp\u003eIn the past, it has led to the following vulnerabilities:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2019-13466\"\u003eCVE-2019-13466\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2018-15389\"\u003eCVE-2018-15389\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eCredentials should be stored outside of the code in a configuration file, a database, or a management service for secrets.\u003c/p\u003e\n\u003cp\u003eThis rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection\nstrings, and for variable names that match any of the patterns from the provided list.\u003c/p\u003e\n\u003cp\u003eIt’s recommended to customize the configuration of this rule with additional credential words such as \"oauthToken\", \"secret\", …​\u003c/p\u003e\n\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Credentials allow access to a sensitive component like a database, a file storage, an API or a service. \u003c/li\u003e\n  \u003cli\u003e Credentials are used in production environments. \u003c/li\u003e\n  \u003cli\u003e Application re-distribution is required before updating the credentials. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Store the credentials in a configuration file that is not pushed to the code repository. \u003c/li\u003e\n  \u003cli\u003e Store the credentials in a database. \u003c/li\u003e\n  \u003cli\u003e Use your cloud provider’s service for managing secrets. \u003c/li\u003e\n  \u003cli\u003e If a password has been disclosed through the source code: change it. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\nString password \u003d \u0027xxxx\u0027; // Sensitive\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nString password \u003d retrievePassword();\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"\u003eOWASP Top 10 2021 Category A7\u003c/a\u003e - Identification and\n  Authentication Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\"\u003eOWASP Top 10 2017 Category A2\u003c/a\u003e - Broken Authentication\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eMITRE, CWE-798\u003c/a\u003e - Use of Hard-coded Credentials \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eMITRE, CWE-259\u003c/a\u003e - Use of Hard-coded Password \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eSANS Top 25\u003c/a\u003e - Porous Defenses \u003c/li\u003e\n  \u003cli\u003e Derived from FindSecBugs rule \u003ca href\u003d\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD\"\u003eHard Coded Password\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
            "mdDesc": "\u003cp\u003eBecause it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true\nfor applications that are distributed or that are open-source.\u003c/p\u003e\n\u003cp\u003eIn the past, it has led to the following vulnerabilities:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2019-13466\"\u003eCVE-2019-13466\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2018-15389\"\u003eCVE-2018-15389\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eCredentials should be stored outside of the code in a configuration file, a database, or a management service for secrets.\u003c/p\u003e\n\u003cp\u003eThis rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection\nstrings, and for variable names that match any of the patterns from the provided list.\u003c/p\u003e\n\u003cp\u003eIt’s recommended to customize the configuration of this rule with additional credential words such as \"oauthToken\", \"secret\", …​\u003c/p\u003e\n\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Credentials allow access to a sensitive component like a database, a file storage, an API or a service. \u003c/li\u003e\n  \u003cli\u003e Credentials are used in production environments. \u003c/li\u003e\n  \u003cli\u003e Application re-distribution is required before updating the credentials. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Store the credentials in a configuration file that is not pushed to the code repository. \u003c/li\u003e\n  \u003cli\u003e Store the credentials in a database. \u003c/li\u003e\n  \u003cli\u003e Use your cloud provider’s service for managing secrets. \u003c/li\u003e\n  \u003cli\u003e If a password has been disclosed through the source code: change it. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\nString password \u003d \u0027xxxx\u0027; // Sensitive\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nString password \u003d retrievePassword();\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"\u003eOWASP Top 10 2021 Category A7\u003c/a\u003e - Identification and\n  Authentication Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\"\u003eOWASP Top 10 2017 Category A2\u003c/a\u003e - Broken Authentication\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eMITRE, CWE-798\u003c/a\u003e - Use of Hard-coded Credentials \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eMITRE, CWE-259\u003c/a\u003e - Use of Hard-coded Password \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eSANS Top 25\u003c/a\u003e - Porous Defenses \u003c/li\u003e\n  \u003cli\u003e Derived from FindSecBugs rule \u003ca href\u003d\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD\"\u003eHard Coded Password\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [
                {
                    "key": "credentialWords",
                    "htmlDesc": "Comma separated list of words identifying potential credentials",
                    "defaultValue": "password,passwd,pwd,passphrase",
                    "type": "STRING"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "30min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "30min",
            "type": "SECURITY_HOTSPOT",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eBecause it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true\nfor applications that are distributed or that are open-source.\u003c/p\u003e\n\u003cp\u003eIn the past, it has led to the following vulnerabilities:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2019-13466\"\u003eCVE-2019-13466\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2018-15389\"\u003eCVE-2018-15389\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eCredentials should be stored outside of the code in a configuration file, a database, or a management service for secrets.\u003c/p\u003e\n\u003cp\u003eThis rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection\nstrings, and for variable names that match any of the patterns from the provided list.\u003c/p\u003e\n\u003cp\u003eIt’s recommended to customize the configuration of this rule with additional credential words such as \"oauthToken\", \"secret\", …​\u003c/p\u003e"
                },
                {
                    "key": "assess_the_problem",
                    "content": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Credentials allow access to a sensitive component like a database, a file storage, an API or a service. \u003c/li\u003e\n  \u003cli\u003e Credentials are used in production environments. \u003c/li\u003e\n  \u003cli\u003e Application re-distribution is required before updating the credentials. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e"
                },
                {
                    "key": "how_to_fix",
                    "content": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Store the credentials in a configuration file that is not pushed to the code repository. \u003c/li\u003e\n  \u003cli\u003e Store the credentials in a database. \u003c/li\u003e\n  \u003cli\u003e Use your cloud provider’s service for managing secrets. \u003c/li\u003e\n  \u003cli\u003e If a password has been disclosed through the source code: change it. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\nString password \u003d \u0027xxxx\u0027; // Sensitive\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nString password \u003d retrievePassword();\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"\u003eOWASP Top 10 2021 Category A7\u003c/a\u003e - Identification and\n  Authentication Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\"\u003eOWASP Top 10 2017 Category A2\u003c/a\u003e - Broken Authentication\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eMITRE, CWE-798\u003c/a\u003e - Use of Hard-coded Credentials \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eMITRE, CWE-259\u003c/a\u003e - Use of Hard-coded Password \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eSANS Top 25\u003c/a\u003e - Porous Defenses \u003c/li\u003e\n  \u003cli\u003e Derived from FindSecBugs rule \u003ca href\u003d\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD\"\u003eHard Coded Password\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
                }
            ],
            "educationPrinciples": [],
            "impacts": []
        },
        {
            "key": "apex:S5378",
            "repo": "apex",
            "name": "Executing SOQL, SOSL or DML queries without sharing or with inherited sharing is security sensitive",
            "createdAt": "2019-08-21T15:36:47+0200",
            "htmlDesc": "\u003cp\u003eBy default Apex code executes without checking permissions. Hence the code will not enforce field level security, sharing rules and user\npermissions during execution of Apex code in Triggers, Classes and Controllers. This creates the risk that unauthorized users may get access to\nsensitive data records or fields.\u003c/p\u003e\n\u003cp\u003eIt is possible to specify different level of sharing via the keywords \"with sharing\", \"without sharing\" or \"inherited sharing\". The last two should\nbe used very carefully as they can create security risks.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue whenever a DML, SOSL or SOQL query is executed in a class marked as \u003ccode\u003ewithout sharing\u003c/code\u003e or \u003ccode\u003einherited\nsharing\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e this code gives access to or modifies restricted records. \u003c/li\u003e\n  \u003cli\u003e this code may be executed by users who shouldn’t have access to those records. \u003c/li\u003e\n  \u003cli\u003e if the class is marked as \u003ccode\u003einherited sharing\u003c/code\u003e, it may be called by a class marked as \u003ccode\u003ewithout sharing\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Use \u003ccode\u003ewith sharing\u003c/code\u003e whenever possible. \u003c/li\u003e\n  \u003cli\u003e Use \u003ccode\u003ewithout sharing\u003c/code\u003e only after checking that the code is not accessible to unauthorized users. \u003c/li\u003e\n  \u003cli\u003e Use \u003ccode\u003einherited sharing\u003c/code\u003e only when all calling \u003ccode\u003ewithout sharing\u003c/code\u003e classes are safe. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic without sharing class MyClass {\n  List\u0026lt;List\u0026lt;SObject\u0026gt;\u0026gt; sList \u003d [FIND \u0027TEST\u0027 IN ALL FIELDS\n                                      RETURNING Case(Name), Contact(FirstName,LastName)]; // Sensitive\n}\n\npublic inherited sharing class MyClass {\n  List\u0026lt;Case\u0026gt; lstCases \u003d new List\u0026lt;Case\u0026gt;();\n  for(Case c:[SELECT Id, Status FROM Case WHERE Status \u003d \u0027In Progress\u0027]){ // Sensitive\n      c.Status \u003d \u0027Closed\u0027;\n      lstCasesToBeUpdated.add(c);\n  }\n  Update lstCasesToBeUpdated; // Sensitive\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic with sharing class MyClass { // Compliant\n  List\u0026lt;Case\u0026gt; lstCases \u003d new List\u0026lt;Case\u0026gt;();\n  for(Case c:[SELECT Id FROM Case WHERE Status \u003d \u0027In Progress\u0027]){\n      // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_classes_keywords_sharing.htm\"\u003eUsing the with sharing,\n  without sharing, and inherited sharing Keywords\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
            "mdDesc": "\u003cp\u003eBy default Apex code executes without checking permissions. Hence the code will not enforce field level security, sharing rules and user\npermissions during execution of Apex code in Triggers, Classes and Controllers. This creates the risk that unauthorized users may get access to\nsensitive data records or fields.\u003c/p\u003e\n\u003cp\u003eIt is possible to specify different level of sharing via the keywords \"with sharing\", \"without sharing\" or \"inherited sharing\". The last two should\nbe used very carefully as they can create security risks.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue whenever a DML, SOSL or SOQL query is executed in a class marked as \u003ccode\u003ewithout sharing\u003c/code\u003e or \u003ccode\u003einherited\nsharing\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e this code gives access to or modifies restricted records. \u003c/li\u003e\n  \u003cli\u003e this code may be executed by users who shouldn’t have access to those records. \u003c/li\u003e\n  \u003cli\u003e if the class is marked as \u003ccode\u003einherited sharing\u003c/code\u003e, it may be called by a class marked as \u003ccode\u003ewithout sharing\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Use \u003ccode\u003ewith sharing\u003c/code\u003e whenever possible. \u003c/li\u003e\n  \u003cli\u003e Use \u003ccode\u003ewithout sharing\u003c/code\u003e only after checking that the code is not accessible to unauthorized users. \u003c/li\u003e\n  \u003cli\u003e Use \u003ccode\u003einherited sharing\u003c/code\u003e only when all calling \u003ccode\u003ewithout sharing\u003c/code\u003e classes are safe. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic without sharing class MyClass {\n  List\u0026lt;List\u0026lt;SObject\u0026gt;\u0026gt; sList \u003d [FIND \u0027TEST\u0027 IN ALL FIELDS\n                                      RETURNING Case(Name), Contact(FirstName,LastName)]; // Sensitive\n}\n\npublic inherited sharing class MyClass {\n  List\u0026lt;Case\u0026gt; lstCases \u003d new List\u0026lt;Case\u0026gt;();\n  for(Case c:[SELECT Id, Status FROM Case WHERE Status \u003d \u0027In Progress\u0027]){ // Sensitive\n      c.Status \u003d \u0027Closed\u0027;\n      lstCasesToBeUpdated.add(c);\n  }\n  Update lstCasesToBeUpdated; // Sensitive\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic with sharing class MyClass { // Compliant\n  List\u0026lt;Case\u0026gt; lstCases \u003d new List\u0026lt;Case\u0026gt;();\n  for(Case c:[SELECT Id FROM Case WHERE Status \u003d \u0027In Progress\u0027]){\n      // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_classes_keywords_sharing.htm\"\u003eUsing the with sharing,\n  without sharing, and inherited sharing Keywords\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "debtOverloaded": false,
            "type": "SECURITY_HOTSPOT",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eBy default Apex code executes without checking permissions. Hence the code will not enforce field level security, sharing rules and user\npermissions during execution of Apex code in Triggers, Classes and Controllers. This creates the risk that unauthorized users may get access to\nsensitive data records or fields.\u003c/p\u003e\n\u003cp\u003eIt is possible to specify different level of sharing via the keywords \"with sharing\", \"without sharing\" or \"inherited sharing\". The last two should\nbe used very carefully as they can create security risks.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue whenever a DML, SOSL or SOQL query is executed in a class marked as \u003ccode\u003ewithout sharing\u003c/code\u003e or \u003ccode\u003einherited\nsharing\u003c/code\u003e.\u003c/p\u003e"
                },
                {
                    "key": "how_to_fix",
                    "content": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Use \u003ccode\u003ewith sharing\u003c/code\u003e whenever possible. \u003c/li\u003e\n  \u003cli\u003e Use \u003ccode\u003ewithout sharing\u003c/code\u003e only after checking that the code is not accessible to unauthorized users. \u003c/li\u003e\n  \u003cli\u003e Use \u003ccode\u003einherited sharing\u003c/code\u003e only when all calling \u003ccode\u003ewithout sharing\u003c/code\u003e classes are safe. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic without sharing class MyClass {\n  List\u0026lt;List\u0026lt;SObject\u0026gt;\u0026gt; sList \u003d [FIND \u0027TEST\u0027 IN ALL FIELDS\n                                      RETURNING Case(Name), Contact(FirstName,LastName)]; // Sensitive\n}\n\npublic inherited sharing class MyClass {\n  List\u0026lt;Case\u0026gt; lstCases \u003d new List\u0026lt;Case\u0026gt;();\n  for(Case c:[SELECT Id, Status FROM Case WHERE Status \u003d \u0027In Progress\u0027]){ // Sensitive\n      c.Status \u003d \u0027Closed\u0027;\n      lstCasesToBeUpdated.add(c);\n  }\n  Update lstCasesToBeUpdated; // Sensitive\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic with sharing class MyClass { // Compliant\n  List\u0026lt;Case\u0026gt; lstCases \u003d new List\u0026lt;Case\u0026gt;();\n  for(Case c:[SELECT Id FROM Case WHERE Status \u003d \u0027In Progress\u0027]){\n      // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_classes_keywords_sharing.htm\"\u003eUsing the with sharing,\n  without sharing, and inherited sharing Keywords\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
                },
                {
                    "key": "assess_the_problem",
                    "content": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e this code gives access to or modifies restricted records. \u003c/li\u003e\n  \u003cli\u003e this code may be executed by users who shouldn’t have access to those records. \u003c/li\u003e\n  \u003cli\u003e if the class is marked as \u003ccode\u003einherited sharing\u003c/code\u003e, it may be called by a class marked as \u003ccode\u003ewithout sharing\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e"
                }
            ],
            "educationPrinciples": [],
            "impacts": []
        },
        {
            "key": "apex:S1313",
            "repo": "apex",
            "name": "Using hardcoded IP addresses is security-sensitive",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003cp\u003eHardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2006-5901\"\u003eCVE-2006-5901\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2005-3725\"\u003eCVE-2005-3725\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eToday’s services have an ever-changing architecture due to their scaling and redundancy needs. It is a mistake to think that a service will always\nhave the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have an impact on the product development,\ndelivery, and deployment:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The developers will have to do a rapid fix every time this happens, instead of having an operation team change a configuration file. \u003c/li\u003e\n  \u003cli\u003e It misleads to use the same address in every environment (dev, sys, qa, prod). \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLast but not least it has an effect on application security. Attackers might be able to decompile the code and thereby discover a potentially\nsensitive address. They can perform a Denial of Service attack on the service, try to get access to the system, or try to spoof the IP address to\nbypass security checks. Such attacks can always be possible, but in the case of a hardcoded IP address solving the issue will take more time, which\nwill increase an attack’s impact.\u003c/p\u003e\n\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cp\u003eThe disclosed IP address is sensitive, e.g.:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Can give information to an attacker about the network topology. \u003c/li\u003e\n  \u003cli\u003e It’s a personal (assigned to an identifiable person) IP address. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of these questions.\u003c/p\u003e\n\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eDon’t hard-code the IP address in the source code, instead make it configurable with environment variables, configuration files, or a similar\napproach. Alternatively, if confidentially is not required a domain name can be used since it allows to change the destination quickly without having\nto rebuild the software.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\nString ip \u003d \u0027192.168.12.42\u0027; // Sensitive\nString clientIp \u003d ApexPages.currentPage().getHeaders().get(‘True-Client-IP’);\nBoolean isKnown \u003d ip.equals(clientIp);\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nStaticResource sr\u003d [SELECT ip_address FROM StaticResource WHERE Name \u003d \u0027configuration\u0027 LIMIT 1]; // Compliant\nString ip_address \u003d sr.body.toString();\nString clientIp \u003d ApexPages.currentPage().getHeaders().get(‘True-Client-IP’);\nBoolean isKnown \u003d ip_address.equals(clientIp);\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eNo issue is reported for the following cases because they are not considered sensitive:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Loopback addresses 127.0.0.0/8 in CIDR notation (from 127.0.0.0 to 127.255.255.255) \u003c/li\u003e\n  \u003cli\u003e Broadcast address 255.255.255.255 \u003c/li\u003e\n  \u003cli\u003e Non-routable address 0.0.0.0 \u003c/li\u003e\n  \u003cli\u003e Strings of the form \u003ccode\u003e2.5.\u0026lt;number\u0026gt;.\u0026lt;number\u0026gt;\u003c/code\u003e as they \u003ca href\u003d\"http://www.oid-info.com/introduction.htm\"\u003eoften match\n  Object Identifiers\u003c/a\u003e (OID) \u003c/li\u003e\n  \u003cli\u003e Addresses in the ranges 192.0.2.0/24, 198.51.100.0/24, 203.0.113.0/24, reserved for documentation purposes by \u003ca\n  href\u003d\"https://datatracker.ietf.org/doc/html/rfc5737\"\u003eRFC 5737\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Addresses in the range 2001:db8::/32, reserved for documentation purposes by \u003ca href\u003d\"https://datatracker.ietf.org/doc/html/rfc3849\"\u003eRFC\n  3849\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\u003eOWASP Top 10 2021 Category A1\u003c/a\u003e - Broken Access Control \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n\u003c/ul\u003e",
            "mdDesc": "\u003cp\u003eHardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2006-5901\"\u003eCVE-2006-5901\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2005-3725\"\u003eCVE-2005-3725\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eToday’s services have an ever-changing architecture due to their scaling and redundancy needs. It is a mistake to think that a service will always\nhave the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have an impact on the product development,\ndelivery, and deployment:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The developers will have to do a rapid fix every time this happens, instead of having an operation team change a configuration file. \u003c/li\u003e\n  \u003cli\u003e It misleads to use the same address in every environment (dev, sys, qa, prod). \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLast but not least it has an effect on application security. Attackers might be able to decompile the code and thereby discover a potentially\nsensitive address. They can perform a Denial of Service attack on the service, try to get access to the system, or try to spoof the IP address to\nbypass security checks. Such attacks can always be possible, but in the case of a hardcoded IP address solving the issue will take more time, which\nwill increase an attack’s impact.\u003c/p\u003e\n\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cp\u003eThe disclosed IP address is sensitive, e.g.:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Can give information to an attacker about the network topology. \u003c/li\u003e\n  \u003cli\u003e It’s a personal (assigned to an identifiable person) IP address. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of these questions.\u003c/p\u003e\n\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eDon’t hard-code the IP address in the source code, instead make it configurable with environment variables, configuration files, or a similar\napproach. Alternatively, if confidentially is not required a domain name can be used since it allows to change the destination quickly without having\nto rebuild the software.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\nString ip \u003d \u0027192.168.12.42\u0027; // Sensitive\nString clientIp \u003d ApexPages.currentPage().getHeaders().get(‘True-Client-IP’);\nBoolean isKnown \u003d ip.equals(clientIp);\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nStaticResource sr\u003d [SELECT ip_address FROM StaticResource WHERE Name \u003d \u0027configuration\u0027 LIMIT 1]; // Compliant\nString ip_address \u003d sr.body.toString();\nString clientIp \u003d ApexPages.currentPage().getHeaders().get(‘True-Client-IP’);\nBoolean isKnown \u003d ip_address.equals(clientIp);\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eNo issue is reported for the following cases because they are not considered sensitive:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Loopback addresses 127.0.0.0/8 in CIDR notation (from 127.0.0.0 to 127.255.255.255) \u003c/li\u003e\n  \u003cli\u003e Broadcast address 255.255.255.255 \u003c/li\u003e\n  \u003cli\u003e Non-routable address 0.0.0.0 \u003c/li\u003e\n  \u003cli\u003e Strings of the form \u003ccode\u003e2.5.\u0026lt;number\u0026gt;.\u0026lt;number\u0026gt;\u003c/code\u003e as they \u003ca href\u003d\"http://www.oid-info.com/introduction.htm\"\u003eoften match\n  Object Identifiers\u003c/a\u003e (OID) \u003c/li\u003e\n  \u003cli\u003e Addresses in the ranges 192.0.2.0/24, 198.51.100.0/24, 203.0.113.0/24, reserved for documentation purposes by \u003ca\n  href\u003d\"https://datatracker.ietf.org/doc/html/rfc5737\"\u003eRFC 5737\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Addresses in the range 2001:db8::/32, reserved for documentation purposes by \u003ca href\u003d\"https://datatracker.ietf.org/doc/html/rfc3849\"\u003eRFC\n  3849\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\u003eOWASP Top 10 2021 Category A1\u003c/a\u003e - Broken Access Control \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n\u003c/ul\u003e",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "30min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "30min",
            "type": "SECURITY_HOTSPOT",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "assess_the_problem",
                    "content": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cp\u003eThe disclosed IP address is sensitive, e.g.:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Can give information to an attacker about the network topology. \u003c/li\u003e\n  \u003cli\u003e It’s a personal (assigned to an identifiable person) IP address. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of these questions.\u003c/p\u003e"
                },
                {
                    "key": "how_to_fix",
                    "content": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eDon’t hard-code the IP address in the source code, instead make it configurable with environment variables, configuration files, or a similar\napproach. Alternatively, if confidentially is not required a domain name can be used since it allows to change the destination quickly without having\nto rebuild the software.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\nString ip \u003d \u0027192.168.12.42\u0027; // Sensitive\nString clientIp \u003d ApexPages.currentPage().getHeaders().get(‘True-Client-IP’);\nBoolean isKnown \u003d ip.equals(clientIp);\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nStaticResource sr\u003d [SELECT ip_address FROM StaticResource WHERE Name \u003d \u0027configuration\u0027 LIMIT 1]; // Compliant\nString ip_address \u003d sr.body.toString();\nString clientIp \u003d ApexPages.currentPage().getHeaders().get(‘True-Client-IP’);\nBoolean isKnown \u003d ip_address.equals(clientIp);\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eNo issue is reported for the following cases because they are not considered sensitive:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Loopback addresses 127.0.0.0/8 in CIDR notation (from 127.0.0.0 to 127.255.255.255) \u003c/li\u003e\n  \u003cli\u003e Broadcast address 255.255.255.255 \u003c/li\u003e\n  \u003cli\u003e Non-routable address 0.0.0.0 \u003c/li\u003e\n  \u003cli\u003e Strings of the form \u003ccode\u003e2.5.\u0026lt;number\u0026gt;.\u0026lt;number\u0026gt;\u003c/code\u003e as they \u003ca href\u003d\"http://www.oid-info.com/introduction.htm\"\u003eoften match\n  Object Identifiers\u003c/a\u003e (OID) \u003c/li\u003e\n  \u003cli\u003e Addresses in the ranges 192.0.2.0/24, 198.51.100.0/24, 203.0.113.0/24, reserved for documentation purposes by \u003ca\n  href\u003d\"https://datatracker.ietf.org/doc/html/rfc5737\"\u003eRFC 5737\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Addresses in the range 2001:db8::/32, reserved for documentation purposes by \u003ca href\u003d\"https://datatracker.ietf.org/doc/html/rfc3849\"\u003eRFC\n  3849\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\u003eOWASP Top 10 2021 Category A1\u003c/a\u003e - Broken Access Control \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n\u003c/ul\u003e"
                },
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eHardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2006-5901\"\u003eCVE-2006-5901\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2005-3725\"\u003eCVE-2005-3725\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eToday’s services have an ever-changing architecture due to their scaling and redundancy needs. It is a mistake to think that a service will always\nhave the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have an impact on the product development,\ndelivery, and deployment:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The developers will have to do a rapid fix every time this happens, instead of having an operation team change a configuration file. \u003c/li\u003e\n  \u003cli\u003e It misleads to use the same address in every environment (dev, sys, qa, prod). \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLast but not least it has an effect on application security. Attackers might be able to decompile the code and thereby discover a potentially\nsensitive address. They can perform a Denial of Service attack on the service, try to get access to the system, or try to spoof the IP address to\nbypass security checks. Such attacks can always be possible, but in the case of a hardcoded IP address solving the issue will take more time, which\nwill increase an attack’s impact.\u003c/p\u003e"
                }
            ],
            "educationPrinciples": [],
            "impacts": []
        },
        {
            "key": "common-apex:FailedUnitTests",
            "repo": "common-apex",
            "name": "Failed unit tests should be fixed",
            "createdAt": "2018-12-07T11:54:30+0100",
            "htmlDesc": "Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.",
            "mdDesc": "Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.",
            "severity": "MAJOR",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "LINEAR",
            "defaultDebtRemFnCoeff": "10min",
            "effortToFixDescription": "number of failed tests",
            "debtOverloaded": false,
            "debtRemFnType": "LINEAR",
            "debtRemFnCoeff": "10min",
            "type": "BUG",
            "defaultRemFnType": "LINEAR",
            "defaultRemFnGapMultiplier": "10min",
            "remFnType": "LINEAR",
            "remFnGapMultiplier": "10min",
            "remFnOverloaded": false,
            "gapDescription": "number of failed tests",
            "scope": "MAIN",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "default",
                    "content": "Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions."
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "common-apex:SkippedUnitTests",
            "repo": "common-apex",
            "name": "Skipped unit tests should be either removed or fixed",
            "createdAt": "2018-12-07T11:54:30+0100",
            "htmlDesc": "Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.",
            "mdDesc": "Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.",
            "severity": "MAJOR",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "LINEAR",
            "defaultDebtRemFnCoeff": "10min",
            "effortToFixDescription": "number of skipped tests",
            "debtOverloaded": false,
            "debtRemFnType": "LINEAR",
            "debtRemFnCoeff": "10min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "LINEAR",
            "defaultRemFnGapMultiplier": "10min",
            "remFnType": "LINEAR",
            "remFnGapMultiplier": "10min",
            "remFnOverloaded": false,
            "gapDescription": "number of skipped tests",
            "scope": "MAIN",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "default",
                    "content": "Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed."
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "common-apex:DuplicatedBlocks",
            "repo": "common-apex",
            "name": "Source files should not have any duplicated blocks",
            "createdAt": "2018-12-07T11:54:30+0100",
            "htmlDesc": "An issue is created on a file as soon as there is at least one block of duplicated code on this file",
            "mdDesc": "An issue is created on a file as soon as there is at least one block of duplicated code on this file",
            "severity": "MAJOR",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "LINEAR_OFFSET",
            "defaultDebtRemFnCoeff": "10min",
            "defaultDebtRemFnOffset": "10min",
            "effortToFixDescription": "number of duplicate blocks",
            "debtOverloaded": false,
            "debtRemFnType": "LINEAR_OFFSET",
            "debtRemFnCoeff": "10min",
            "debtRemFnOffset": "10min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "LINEAR_OFFSET",
            "defaultRemFnGapMultiplier": "10min",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "LINEAR_OFFSET",
            "remFnGapMultiplier": "10min",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "gapDescription": "number of duplicate blocks",
            "scope": "MAIN",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "default",
                    "content": "An issue is created on a file as soon as there is at least one block of duplicated code on this file"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "common-apex:InsufficientCommentDensity",
            "repo": "common-apex",
            "name": "Source files should have a sufficient density of comment lines",
            "createdAt": "2018-12-07T11:54:30+0100",
            "htmlDesc": "An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.",
            "mdDesc": "An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.",
            "severity": "MAJOR",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [
                {
                    "key": "minimumCommentDensity",
                    "defaultValue": "25",
                    "type": "FLOAT"
                }
            ],
            "defaultDebtRemFnType": "LINEAR",
            "defaultDebtRemFnCoeff": "2min",
            "effortToFixDescription": "number of lines required to meet minimum density",
            "debtOverloaded": false,
            "debtRemFnType": "LINEAR",
            "debtRemFnCoeff": "2min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "LINEAR",
            "defaultRemFnGapMultiplier": "2min",
            "remFnType": "LINEAR",
            "remFnGapMultiplier": "2min",
            "remFnOverloaded": false,
            "gapDescription": "number of lines required to meet minimum density",
            "scope": "MAIN",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "default",
                    "content": "An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message."
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "common-apex:InsufficientLineCoverage",
            "repo": "common-apex",
            "name": "Lines should have sufficient coverage by tests",
            "createdAt": "2018-12-07T11:54:30+0100",
            "htmlDesc": "An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.",
            "mdDesc": "An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.",
            "severity": "MAJOR",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "bad-practice"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [
                {
                    "key": "minimumLineCoverageRatio",
                    "defaultValue": "65",
                    "type": "FLOAT"
                }
            ],
            "defaultDebtRemFnType": "LINEAR",
            "defaultDebtRemFnCoeff": "2min",
            "effortToFixDescription": "number of lines under the coverage threshold",
            "debtOverloaded": false,
            "debtRemFnType": "LINEAR",
            "debtRemFnCoeff": "2min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "LINEAR",
            "defaultRemFnGapMultiplier": "2min",
            "remFnType": "LINEAR",
            "remFnGapMultiplier": "2min",
            "remFnOverloaded": false,
            "gapDescription": "number of lines under the coverage threshold",
            "scope": "MAIN",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "default",
                    "content": "An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold."
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "common-apex:InsufficientBranchCoverage",
            "repo": "common-apex",
            "name": "Branches should have sufficient coverage by tests",
            "createdAt": "2018-12-07T11:54:30+0100",
            "htmlDesc": "An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.",
            "mdDesc": "An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.",
            "severity": "MAJOR",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "bad-practice"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [
                {
                    "key": "minimumBranchCoverageRatio",
                    "defaultValue": "65",
                    "type": "FLOAT"
                }
            ],
            "defaultDebtRemFnType": "LINEAR",
            "defaultDebtRemFnCoeff": "5min",
            "effortToFixDescription": "number of uncovered conditions",
            "debtOverloaded": false,
            "debtRemFnType": "LINEAR",
            "debtRemFnCoeff": "5min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "LINEAR",
            "defaultRemFnGapMultiplier": "5min",
            "remFnType": "LINEAR",
            "remFnGapMultiplier": "5min",
            "remFnOverloaded": false,
            "gapDescription": "number of uncovered conditions",
            "scope": "MAIN",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "default",
                    "content": "An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold."
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "apex:S1135",
            "repo": "apex",
            "name": "Track uses of \"TODO\" tags",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eDevelopers often use \u003ccode\u003eTOOO\u003c/code\u003e tags to mark areas in the code where additional work or improvements are needed but are not implemented\nimmediately. However, these \u003ccode\u003eTODO\u003c/code\u003e tags sometimes get overlooked or forgotten, leading to incomplete or unfinished code. This code smell\nclass aims to identify and address such unattended \u003ccode\u003eTODO\u003c/code\u003e tags to ensure a clean and maintainable codebase. This description will explore\nwhy this is a problem and how it can be fixed to improve the overall code quality.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eUnattended \u003ccode\u003eTODO\u003c/code\u003e tags in code can have significant implications for the development process and the overall codebase.\u003c/p\u003e\n\u003cp\u003eIncomplete Functionality: When developers leave \u003ccode\u003eTODO\u003c/code\u003e tags without implementing the corresponding code, it results in incomplete\nfunctionality within the software. This can lead to unexpected behavior or missing features, adversely affecting the end-user experience.\u003c/p\u003e\n\u003cp\u003eMissed Bug Fixes: If developers do not promptly address \u003ccode\u003eTODO\u003c/code\u003e tags, they might overlook critical bug fixes and security updates.\nDelayed bug fixes can result in more severe issues and increase the effort required to resolve them later.\u003c/p\u003e\n\u003cp\u003eImpact on Collaboration: In team-based development environments, unattended \u003ccode\u003eTODO\u003c/code\u003e tags can hinder collaboration. Other team members\nmight not be aware of the intended changes, leading to conflicts or redundant efforts in the codebase.\u003c/p\u003e\n\u003cp\u003eCodebase Bloat: Accumulation of unattended \u003ccode\u003eTODO\u003c/code\u003e tags over time can clutter the codebase and make it difficult to distinguish between\nwork in progress and completed code. This bloat can make it challenging to maintain an organized and efficient codebase.\u003c/p\u003e\n\u003cp\u003eAddressing this code smell is essential to ensure a maintainable, readable, reliable codebase and promote effective collaboration among\ndevelopers.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/546\"\u003eMITRE, CWE-546\u003c/a\u003e - Suspicious Comment \u003c/li\u003e\n\u003c/ul\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eDevelopers often use \u003ccode\u003eTOOO\u003c/code\u003e tags to mark areas in the code where additional work or improvements are needed but are not implemented\nimmediately. However, these \u003ccode\u003eTODO\u003c/code\u003e tags sometimes get overlooked or forgotten, leading to incomplete or unfinished code. This code smell\nclass aims to identify and address such unattended \u003ccode\u003eTODO\u003c/code\u003e tags to ensure a clean and maintainable codebase. This description will explore\nwhy this is a problem and how it can be fixed to improve the overall code quality.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eUnattended \u003ccode\u003eTODO\u003c/code\u003e tags in code can have significant implications for the development process and the overall codebase.\u003c/p\u003e\n\u003cp\u003eIncomplete Functionality: When developers leave \u003ccode\u003eTODO\u003c/code\u003e tags without implementing the corresponding code, it results in incomplete\nfunctionality within the software. This can lead to unexpected behavior or missing features, adversely affecting the end-user experience.\u003c/p\u003e\n\u003cp\u003eMissed Bug Fixes: If developers do not promptly address \u003ccode\u003eTODO\u003c/code\u003e tags, they might overlook critical bug fixes and security updates.\nDelayed bug fixes can result in more severe issues and increase the effort required to resolve them later.\u003c/p\u003e\n\u003cp\u003eImpact on Collaboration: In team-based development environments, unattended \u003ccode\u003eTODO\u003c/code\u003e tags can hinder collaboration. Other team members\nmight not be aware of the intended changes, leading to conflicts or redundant efforts in the codebase.\u003c/p\u003e\n\u003cp\u003eCodebase Bloat: Accumulation of unattended \u003ccode\u003eTODO\u003c/code\u003e tags over time can clutter the codebase and make it difficult to distinguish between\nwork in progress and completed code. This bloat can make it challenging to maintain an organized and efficient codebase.\u003c/p\u003e\n\u003cp\u003eAddressing this code smell is essential to ensure a maintainable, readable, reliable codebase and promote effective collaboration among\ndevelopers.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/546\"\u003eMITRE, CWE-546\u003c/a\u003e - Suspicious Comment \u003c/li\u003e\n\u003c/ul\u003e",
            "severity": "INFO",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "0min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "0min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "0min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "0min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/546\"\u003eMITRE, CWE-546\u003c/a\u003e - Suspicious Comment \u003c/li\u003e\n\u003c/ul\u003e"
                },
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eDevelopers often use \u003ccode\u003eTOOO\u003c/code\u003e tags to mark areas in the code where additional work or improvements are needed but are not implemented\nimmediately. However, these \u003ccode\u003eTODO\u003c/code\u003e tags sometimes get overlooked or forgotten, leading to incomplete or unfinished code. This code smell\nclass aims to identify and address such unattended \u003ccode\u003eTODO\u003c/code\u003e tags to ensure a clean and maintainable codebase. This description will explore\nwhy this is a problem and how it can be fixed to improve the overall code quality.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eUnattended \u003ccode\u003eTODO\u003c/code\u003e tags in code can have significant implications for the development process and the overall codebase.\u003c/p\u003e\n\u003cp\u003eIncomplete Functionality: When developers leave \u003ccode\u003eTODO\u003c/code\u003e tags without implementing the corresponding code, it results in incomplete\nfunctionality within the software. This can lead to unexpected behavior or missing features, adversely affecting the end-user experience.\u003c/p\u003e\n\u003cp\u003eMissed Bug Fixes: If developers do not promptly address \u003ccode\u003eTODO\u003c/code\u003e tags, they might overlook critical bug fixes and security updates.\nDelayed bug fixes can result in more severe issues and increase the effort required to resolve them later.\u003c/p\u003e\n\u003cp\u003eImpact on Collaboration: In team-based development environments, unattended \u003ccode\u003eTODO\u003c/code\u003e tags can hinder collaboration. Other team members\nmight not be aware of the intended changes, leading to conflicts or redundant efforts in the codebase.\u003c/p\u003e\n\u003cp\u003eCodebase Bloat: Accumulation of unattended \u003ccode\u003eTODO\u003c/code\u003e tags over time can clutter the codebase and make it difficult to distinguish between\nwork in progress and completed code. This bloat can make it challenging to maintain an organized and efficient codebase.\u003c/p\u003e\n\u003cp\u003eAddressing this code smell is essential to ensure a maintainable, readable, reliable codebase and promote effective collaboration among\ndevelopers.\u003c/p\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "apex:S1134",
            "repo": "apex",
            "name": "Track uses of \"FIXME\" tags",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eFIXME\u003c/code\u003e tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.\u003c/p\u003e\n\u003cp\u003eSometimes the developer will not have the time or will simply forget to get back to that tag.\u003c/p\u003e\n\u003cp\u003eThis rule is meant to track those tags and to ensure that they do not go unnoticed.\u003c/p\u003e\n\u003cpre\u003e\nInteger divide(Integer numerator, Integer denominator) {\n  return numerator / denominator;              // FIXME denominator value might be  0\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/546\"\u003eMITRE, CWE-546 - Suspicious Comment\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eFIXME\u003c/code\u003e tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.\u003c/p\u003e\n\u003cp\u003eSometimes the developer will not have the time or will simply forget to get back to that tag.\u003c/p\u003e\n\u003cp\u003eThis rule is meant to track those tags and to ensure that they do not go unnoticed.\u003c/p\u003e\n\u003cpre\u003e\nInteger divide(Integer numerator, Integer denominator) {\n  return numerator / denominator;              // FIXME denominator value might be  0\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/546\"\u003eMITRE, CWE-546 - Suspicious Comment\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "0min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "0min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "0min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "0min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/546\"\u003eMITRE, CWE-546 - Suspicious Comment\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
                },
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003e\u003ccode\u003eFIXME\u003c/code\u003e tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.\u003c/p\u003e\n\u003cp\u003eSometimes the developer will not have the time or will simply forget to get back to that tag.\u003c/p\u003e\n\u003cp\u003eThis rule is meant to track those tags and to ensure that they do not go unnoticed.\u003c/p\u003e\n\u003cpre\u003e\nInteger divide(Integer numerator, Integer denominator) {\n  return numerator / denominator;              // FIXME denominator value might be  0\n}\n\u003c/pre\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "apex:S5377",
            "repo": "apex",
            "name": "Sharing level should be specified in Apex Classes with SOQL/SOSL Queries or DML Statements",
            "createdAt": "2019-08-21T15:36:47+0200",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eBy default Apex code executes without checking permissions. Hence the code will not enforce field level security, sharing rules and user\npermissions during execution of Apex code in Triggers, Classes and Controllers. This creates the risk that unauthorized users may get access to\nsensitive data records or fields.\u003c/p\u003e\n\u003cp\u003eTo prevent this, developers should use \u003ccode\u003ewith sharing\u003c/code\u003e keyword when declaring their classes if the class has SOQL or SOSL queries or DML\nStatements. This will ensure that current user’s permissions, field level security and sharing rules are enforced during code execution. Thus users\nwill only see or modify records and fields which they have access to.\u003c/p\u003e\n\u003cp\u003eUse \u003ccode\u003ewithout sharing\u003c/code\u003e when a specific class should have full access to records without taking into account current user’s permissions.\nThis should be used very carefully.\u003c/p\u003e\n\u003cp\u003eUse \u003ccode\u003einherited sharing\u003c/code\u003e when the code should inherit the level of access from the calling class. This is more secure than not specifying\na sharing level as the default will be equivalent to \"with sharing\".\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a class containing DML, SOSL or SOQL queries has no sharing level specified (\u003ccode\u003ewith sharing\u003c/code\u003e,\n\u003ccode\u003ewithout sharing\u003c/code\u003e, \u003ccode\u003einherited sharing\u003c/code\u003e).\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class MyClass { // Noncompliant, no sharing specified\n  List\u0026lt;Case\u0026gt; lstCases \u003d new List\u0026lt;Case\u0026gt;();\n  for(Case c:[SELECT Id FROM Case WHERE Status \u003d \u0027In Progress\u0027]){ // SOQL query\n      // ...\n  }\n}\n\npublic class MyClass { // Noncompliant\n  List\u0026lt;List\u0026lt;SObject\u0026gt;\u0026gt; sList \u003d [FIND \u0027TEST\u0027 IN ALL FIELDS\n                                      RETURNING Case(Name), Contact(FirstName,LastName)]; // SOSL query\n\n}\n\npublic class MyClass { // Noncompliant\n  List\u0026lt;Case\u0026gt; lstCases \u003d new List\u0026lt;Case\u0026gt;();\n  for(Case c:[SELECT Id, Status FROM Case WHERE Status \u003d \u0027In Progress\u0027]){\n      c.Status \u003d \u0027Closed\u0027;\n      lstCasesToBeUpdated.add(c);\n  }\n  Update lstCasesToBeUpdated;  // DML query\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic with sharing class MyClass {\n  List\u0026lt;Case\u0026gt; lstCases \u003d new List\u0026lt;Case\u0026gt;();\n  for(Case c:[SELECT Id FROM Case WHERE Status \u003d \u0027In Progress\u0027]){\n      // ...\n  }\n}\n\npublic without sharing class MyClass {\n  List\u0026lt;List\u0026lt;SObject\u0026gt;\u0026gt; sList \u003d [FIND \u0027TEST\u0027 IN ALL FIELDS\n                                      RETURNING Case(Name), Contact(FirstName,LastName)];\n}\n\npublic inherited sharing class MyClass {\n  List\u0026lt;Case\u0026gt; lstCases \u003d new List\u0026lt;Case\u0026gt;();\n  for(Case c:[SELECT Id, Status FROM Case WHERE Status \u003d \u0027In Progress\u0027]){\n      c.Status \u003d \u0027Closed\u0027;\n      lstCasesToBeUpdated.add(c);\n  }\n  Update lstCasesToBeUpdated;\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eNo issue will be raised for test classes, i.e. classes annotated with \u003ccode\u003e@isTest\u003c/code\u003e\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_classes_keywords_sharing.htm\"\u003eUsing the with sharing,\n  without sharing, and inherited sharing Keywords\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eBy default Apex code executes without checking permissions. Hence the code will not enforce field level security, sharing rules and user\npermissions during execution of Apex code in Triggers, Classes and Controllers. This creates the risk that unauthorized users may get access to\nsensitive data records or fields.\u003c/p\u003e\n\u003cp\u003eTo prevent this, developers should use \u003ccode\u003ewith sharing\u003c/code\u003e keyword when declaring their classes if the class has SOQL or SOSL queries or DML\nStatements. This will ensure that current user’s permissions, field level security and sharing rules are enforced during code execution. Thus users\nwill only see or modify records and fields which they have access to.\u003c/p\u003e\n\u003cp\u003eUse \u003ccode\u003ewithout sharing\u003c/code\u003e when a specific class should have full access to records without taking into account current user’s permissions.\nThis should be used very carefully.\u003c/p\u003e\n\u003cp\u003eUse \u003ccode\u003einherited sharing\u003c/code\u003e when the code should inherit the level of access from the calling class. This is more secure than not specifying\na sharing level as the default will be equivalent to \"with sharing\".\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a class containing DML, SOSL or SOQL queries has no sharing level specified (\u003ccode\u003ewith sharing\u003c/code\u003e,\n\u003ccode\u003ewithout sharing\u003c/code\u003e, \u003ccode\u003einherited sharing\u003c/code\u003e).\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class MyClass { // Noncompliant, no sharing specified\n  List\u0026lt;Case\u0026gt; lstCases \u003d new List\u0026lt;Case\u0026gt;();\n  for(Case c:[SELECT Id FROM Case WHERE Status \u003d \u0027In Progress\u0027]){ // SOQL query\n      // ...\n  }\n}\n\npublic class MyClass { // Noncompliant\n  List\u0026lt;List\u0026lt;SObject\u0026gt;\u0026gt; sList \u003d [FIND \u0027TEST\u0027 IN ALL FIELDS\n                                      RETURNING Case(Name), Contact(FirstName,LastName)]; // SOSL query\n\n}\n\npublic class MyClass { // Noncompliant\n  List\u0026lt;Case\u0026gt; lstCases \u003d new List\u0026lt;Case\u0026gt;();\n  for(Case c:[SELECT Id, Status FROM Case WHERE Status \u003d \u0027In Progress\u0027]){\n      c.Status \u003d \u0027Closed\u0027;\n      lstCasesToBeUpdated.add(c);\n  }\n  Update lstCasesToBeUpdated;  // DML query\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic with sharing class MyClass {\n  List\u0026lt;Case\u0026gt; lstCases \u003d new List\u0026lt;Case\u0026gt;();\n  for(Case c:[SELECT Id FROM Case WHERE Status \u003d \u0027In Progress\u0027]){\n      // ...\n  }\n}\n\npublic without sharing class MyClass {\n  List\u0026lt;List\u0026lt;SObject\u0026gt;\u0026gt; sList \u003d [FIND \u0027TEST\u0027 IN ALL FIELDS\n                                      RETURNING Case(Name), Contact(FirstName,LastName)];\n}\n\npublic inherited sharing class MyClass {\n  List\u0026lt;Case\u0026gt; lstCases \u003d new List\u0026lt;Case\u0026gt;();\n  for(Case c:[SELECT Id, Status FROM Case WHERE Status \u003d \u0027In Progress\u0027]){\n      c.Status \u003d \u0027Closed\u0027;\n      lstCasesToBeUpdated.add(c);\n  }\n  Update lstCasesToBeUpdated;\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eNo issue will be raised for test classes, i.e. classes annotated with \u003ccode\u003e@isTest\u003c/code\u003e\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_classes_keywords_sharing.htm\"\u003eUsing the with sharing,\n  without sharing, and inherited sharing Keywords\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "type": "VULNERABILITY",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_classes_keywords_sharing.htm\"\u003eUsing the with sharing,\n  without sharing, and inherited sharing Keywords\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
                },
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eBy default Apex code executes without checking permissions. Hence the code will not enforce field level security, sharing rules and user\npermissions during execution of Apex code in Triggers, Classes and Controllers. This creates the risk that unauthorized users may get access to\nsensitive data records or fields.\u003c/p\u003e\n\u003cp\u003eTo prevent this, developers should use \u003ccode\u003ewith sharing\u003c/code\u003e keyword when declaring their classes if the class has SOQL or SOSL queries or DML\nStatements. This will ensure that current user’s permissions, field level security and sharing rules are enforced during code execution. Thus users\nwill only see or modify records and fields which they have access to.\u003c/p\u003e\n\u003cp\u003eUse \u003ccode\u003ewithout sharing\u003c/code\u003e when a specific class should have full access to records without taking into account current user’s permissions.\nThis should be used very carefully.\u003c/p\u003e\n\u003cp\u003eUse \u003ccode\u003einherited sharing\u003c/code\u003e when the code should inherit the level of access from the calling class. This is more secure than not specifying\na sharing level as the default will be equivalent to \"with sharing\".\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a class containing DML, SOSL or SOQL queries has no sharing level specified (\u003ccode\u003ewith sharing\u003c/code\u003e,\n\u003ccode\u003ewithout sharing\u003c/code\u003e, \u003ccode\u003einherited sharing\u003c/code\u003e).\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class MyClass { // Noncompliant, no sharing specified\n  List\u0026lt;Case\u0026gt; lstCases \u003d new List\u0026lt;Case\u0026gt;();\n  for(Case c:[SELECT Id FROM Case WHERE Status \u003d \u0027In Progress\u0027]){ // SOQL query\n      // ...\n  }\n}\n\npublic class MyClass { // Noncompliant\n  List\u0026lt;List\u0026lt;SObject\u0026gt;\u0026gt; sList \u003d [FIND \u0027TEST\u0027 IN ALL FIELDS\n                                      RETURNING Case(Name), Contact(FirstName,LastName)]; // SOSL query\n\n}\n\npublic class MyClass { // Noncompliant\n  List\u0026lt;Case\u0026gt; lstCases \u003d new List\u0026lt;Case\u0026gt;();\n  for(Case c:[SELECT Id, Status FROM Case WHERE Status \u003d \u0027In Progress\u0027]){\n      c.Status \u003d \u0027Closed\u0027;\n      lstCasesToBeUpdated.add(c);\n  }\n  Update lstCasesToBeUpdated;  // DML query\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic with sharing class MyClass {\n  List\u0026lt;Case\u0026gt; lstCases \u003d new List\u0026lt;Case\u0026gt;();\n  for(Case c:[SELECT Id FROM Case WHERE Status \u003d \u0027In Progress\u0027]){\n      // ...\n  }\n}\n\npublic without sharing class MyClass {\n  List\u0026lt;List\u0026lt;SObject\u0026gt;\u0026gt; sList \u003d [FIND \u0027TEST\u0027 IN ALL FIELDS\n                                      RETURNING Case(Name), Contact(FirstName,LastName)];\n}\n\npublic inherited sharing class MyClass {\n  List\u0026lt;Case\u0026gt; lstCases \u003d new List\u0026lt;Case\u0026gt;();\n  for(Case c:[SELECT Id, Status FROM Case WHERE Status \u003d \u0027In Progress\u0027]){\n      c.Status \u003d \u0027Closed\u0027;\n      lstCasesToBeUpdated.add(c);\n  }\n  Update lstCasesToBeUpdated;\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eNo issue will be raised for test classes, i.e. classes annotated with \u003ccode\u003e@isTest\u003c/code\u003e\u003c/p\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "SECURITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "apex:S5376",
            "repo": "apex",
            "name": "Triggers should process records in bulk",
            "createdAt": "2019-08-21T15:36:47+0200",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAn Apex trigger may be called with a batch of records. This for example happens when a bulk DML is executed. All records provided by the triggers\nshould be processed.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when specific records from the \u003ccode\u003eTrigger\u003c/code\u003e are referenced, i.e. when it finds one of the following patterns:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eTrigger.new[x]\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eTrigger.old[x]\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eTrigger.oldmap.get(x)\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eTrigger.newmap.get(x)\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ewhere \u003ccode\u003ex\u003c/code\u003e is a hardcoded number.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\ntrigger CaseTrigger on Case (before insert, before update) {\n\n    //This only handles the first record in the Trigger.new collection\n    //But if more than 1 Case initiated this trigger, those additional records\n    //will not be processed\n    Case c1 \u003d Trigger.old[0]; // Noncompliant\n    Case c2 \u003d Trigger.new[0]; // Noncompliant\n    Case c3 \u003d Trigger.oldmap.get(1); // Noncompliant\n    Case c4 \u003d Trigger.newmap.get(1); // Noncompliant\n     // ...\n }\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\ntrigger CaseTrigger on Case (before insert, before update) {\n    List\u0026lt;String\u0026gt; Names \u003d new List\u0026lt;String\u0026gt;{};\n\n    //Loop through all records in the Trigger.new collection\n    for(Case c: Trigger.new){ // Good: Iterate through the trigger.new array instead\n       c.Subject \u003d c.Number + \u0027:\u0027 + c.Status\n    }\n }\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://trailhead.salesforce.com/en/content/learn/modules/apex_triggers/apex_triggers_bulk\"\u003eBulk Apex Triggers\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.salesforce.com/wiki/apex_code_best_practices\"\u003eApex Design Best Practices\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAn Apex trigger may be called with a batch of records. This for example happens when a bulk DML is executed. All records provided by the triggers\nshould be processed.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when specific records from the \u003ccode\u003eTrigger\u003c/code\u003e are referenced, i.e. when it finds one of the following patterns:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eTrigger.new[x]\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eTrigger.old[x]\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eTrigger.oldmap.get(x)\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eTrigger.newmap.get(x)\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ewhere \u003ccode\u003ex\u003c/code\u003e is a hardcoded number.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\ntrigger CaseTrigger on Case (before insert, before update) {\n\n    //This only handles the first record in the Trigger.new collection\n    //But if more than 1 Case initiated this trigger, those additional records\n    //will not be processed\n    Case c1 \u003d Trigger.old[0]; // Noncompliant\n    Case c2 \u003d Trigger.new[0]; // Noncompliant\n    Case c3 \u003d Trigger.oldmap.get(1); // Noncompliant\n    Case c4 \u003d Trigger.newmap.get(1); // Noncompliant\n     // ...\n }\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\ntrigger CaseTrigger on Case (before insert, before update) {\n    List\u0026lt;String\u0026gt; Names \u003d new List\u0026lt;String\u0026gt;{};\n\n    //Loop through all records in the Trigger.new collection\n    for(Case c: Trigger.new){ // Good: Iterate through the trigger.new array instead\n       c.Subject \u003d c.Number + \u0027:\u0027 + c.Status\n    }\n }\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://trailhead.salesforce.com/en/content/learn/modules/apex_triggers/apex_triggers_bulk\"\u003eBulk Apex Triggers\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.salesforce.com/wiki/apex_code_best_practices\"\u003eApex Design Best Practices\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eAn Apex trigger may be called with a batch of records. This for example happens when a bulk DML is executed. All records provided by the triggers\nshould be processed.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when specific records from the \u003ccode\u003eTrigger\u003c/code\u003e are referenced, i.e. when it finds one of the following patterns:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eTrigger.new[x]\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eTrigger.old[x]\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eTrigger.oldmap.get(x)\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eTrigger.newmap.get(x)\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ewhere \u003ccode\u003ex\u003c/code\u003e is a hardcoded number.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\ntrigger CaseTrigger on Case (before insert, before update) {\n\n    //This only handles the first record in the Trigger.new collection\n    //But if more than 1 Case initiated this trigger, those additional records\n    //will not be processed\n    Case c1 \u003d Trigger.old[0]; // Noncompliant\n    Case c2 \u003d Trigger.new[0]; // Noncompliant\n    Case c3 \u003d Trigger.oldmap.get(1); // Noncompliant\n    Case c4 \u003d Trigger.newmap.get(1); // Noncompliant\n     // ...\n }\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\ntrigger CaseTrigger on Case (before insert, before update) {\n    List\u0026lt;String\u0026gt; Names \u003d new List\u0026lt;String\u0026gt;{};\n\n    //Loop through all records in the Trigger.new collection\n    for(Case c: Trigger.new){ // Good: Iterate through the trigger.new array instead\n       c.Subject \u003d c.Number + \u0027:\u0027 + c.Status\n    }\n }\n\u003c/pre\u003e"
                },
                {
                    "key": "resources",
                    "content": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://trailhead.salesforce.com/en/content/learn/modules/apex_triggers/apex_triggers_bulk\"\u003eBulk Apex Triggers\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.salesforce.com/wiki/apex_code_best_practices\"\u003eApex Design Best Practices\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "apex:S1451",
            "repo": "apex",
            "name": "Track lack of copyright and license headers",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eEach source file should start with a header stating file ownership and the license which must be used to distribute the application.\u003c/p\u003e\n\u003cp\u003eThis rule must be fed with the header text that is expected at the beginning of every file.\u003c/p\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n/*\n * SonarQube, open source software quality management tool.\n * Copyright (C) 2008-2013 SonarSource\n * mailto:contact AT sonarsource DOT com\n *\n * SonarQube is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * SonarQube is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n\u003c/pre\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eEach source file should start with a header stating file ownership and the license which must be used to distribute the application.\u003c/p\u003e\n\u003cp\u003eThis rule must be fed with the header text that is expected at the beginning of every file.\u003c/p\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n/*\n * SonarQube, open source software quality management tool.\n * Copyright (C) 2008-2013 SonarSource\n * mailto:contact AT sonarsource DOT com\n *\n * SonarQube is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * SonarQube is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n\u003c/pre\u003e",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "apex",
            "langName": "Apex",
            "params": [
                {
                    "key": "headerFormat",
                    "htmlDesc": "Expected copyright and license header",
                    "type": "TEXT"
                },
                {
                    "key": "isRegularExpression",
                    "htmlDesc": "Whether the headerFormat is a regular expression",
                    "defaultValue": "false",
                    "type": "BOOLEAN"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eEach source file should start with a header stating file ownership and the license which must be used to distribute the application.\u003c/p\u003e\n\u003cp\u003eThis rule must be fed with the header text that is expected at the beginning of every file.\u003c/p\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n/*\n * SonarQube, open source software quality management tool.\n * Copyright (C) 2008-2013 SonarSource\n * mailto:contact AT sonarsource DOT com\n *\n * SonarQube is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * SonarQube is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n\u003c/pre\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "LAWFUL",
            "cleanCodeAttributeCategory": "RESPONSIBLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "apex:S5379",
            "repo": "apex",
            "name": "Record IDs should not be hardcoded",
            "createdAt": "2019-08-21T15:36:47+0200",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eSalesforce Record Ids vary across environments. Thus if a Record Id is hardcoded in Apex code, the code may not work as expected when it is\ndeployed in another environment. This happens because the environment in which the code is deployed may not have the same hardcoded record Id. Hence\nit is a best practice to avoid hard coding record Ids.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when it detects hardcoded record Ids, i.e. strings which contain 15 or 18 characters and which start with any of the\nprefixes \u003ca href\u003d\"https://help.salesforce.com/articleView?id\u003d000005995\u0026amp;language\u003den_US\u0026amp;type\u003d1\"\u003elisted by Salesforce\u003c/a\u003e\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfor(Case c: Trigger.new){\n   if(c.RecordTypeId\u003d\u003d\u0027012500000009tuy\u0027){ // Noncompliant\n      // ...\n   } else if(c.RecordTypeId\u003d\u003d\u00270123000000095Kmwer\u0027){ // Noncompliant\n      // ...\n   }\n}\n\u003c/pre\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eSalesforce Record Ids vary across environments. Thus if a Record Id is hardcoded in Apex code, the code may not work as expected when it is\ndeployed in another environment. This happens because the environment in which the code is deployed may not have the same hardcoded record Id. Hence\nit is a best practice to avoid hard coding record Ids.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when it detects hardcoded record Ids, i.e. strings which contain 15 or 18 characters and which start with any of the\nprefixes \u003ca href\u003d\"https://help.salesforce.com/articleView?id\u003d000005995\u0026amp;language\u003den_US\u0026amp;type\u003d1\"\u003elisted by Salesforce\u003c/a\u003e\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfor(Case c: Trigger.new){\n   if(c.RecordTypeId\u003d\u003d\u0027012500000009tuy\u0027){ // Noncompliant\n      // ...\n   } else if(c.RecordTypeId\u003d\u003d\u00270123000000095Kmwer\u0027){ // Noncompliant\n      // ...\n   }\n}\n\u003c/pre\u003e",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eSalesforce Record Ids vary across environments. Thus if a Record Id is hardcoded in Apex code, the code may not work as expected when it is\ndeployed in another environment. This happens because the environment in which the code is deployed may not have the same hardcoded record Id. Hence\nit is a best practice to avoid hard coding record Ids.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when it detects hardcoded record Ids, i.e. strings which contain 15 or 18 characters and which start with any of the\nprefixes \u003ca href\u003d\"https://help.salesforce.com/articleView?id\u003d000005995\u0026amp;language\u003den_US\u0026amp;type\u003d1\"\u003elisted by Salesforce\u003c/a\u003e\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfor(Case c: Trigger.new){\n   if(c.RecordTypeId\u003d\u003d\u0027012500000009tuy\u0027){ // Noncompliant\n      // ...\n   } else if(c.RecordTypeId\u003d\u003d\u00270123000000095Kmwer\u0027){ // Noncompliant\n      // ...\n   }\n}\n\u003c/pre\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "apex:ParsingError",
            "repo": "apex",
            "name": "Track parsing failures",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen the parser fails, it is possible to record the failure as an issue on the file. This way, not only is it possible to track the number of files\nthat do not parse but also to easily find out why they do not parse.\u003c/p\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen the parser fails, it is possible to record the failure as an issue on the file. This way, not only is it possible to track the number of files\nthat do not parse but also to easily find out why they do not parse.\u003c/p\u003e",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "suspicious"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "30min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "30min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eWhen the parser fails, it is possible to record the failure as an issue on the file. This way, not only is it possible to track the number of files\nthat do not parse but also to easily find out why they do not parse.\u003c/p\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "apex:S1656",
            "repo": "apex",
            "name": "Variables should not be self-assigned",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThere is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic void setName(String name) {\n  name \u003d name;\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic void setName(String name) {\n  this.name \u003d name;\n}\n\u003c/pre\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThere is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic void setName(String name) {\n  name \u003d name;\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic void setName(String name) {\n  this.name \u003d name;\n}\n\u003c/pre\u003e",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "3min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "3min",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "3min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "3min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eThere is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic void setName(String name) {\n  name \u003d name;\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic void setName(String name) {\n  this.name \u003d name;\n}\n\u003c/pre\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "apex:S103",
            "repo": "apex",
            "name": "Lines should not be too long",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eScrolling horizontally to see a full line of code lowers the code readability.\u003c/p\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eScrolling horizontally to see a full line of code lowers the code readability.\u003c/p\u003e",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [
                {
                    "key": "maximumLineLength",
                    "htmlDesc": "The maximum authorized line length.",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "1min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "1min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eScrolling horizontally to see a full line of code lowers the code readability.\u003c/p\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "FORMATTED",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "apex:S1172",
            "repo": "apex",
            "name": "Unused function parameters should be removed",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUnused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvoid doSomething(Integer a, Integer b) {     // \"b\" is unused\n  compute(a);\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvoid doSomething(Integer a) {\n  compute(a);\n}\n\u003c/pre\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUnused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvoid doSomething(Integer a, Integer b) {     // \"b\" is unused\n  compute(a);\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvoid doSomething(Integer a) {\n  compute(a);\n}\n\u003c/pre\u003e",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "unused"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eUnused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvoid doSomething(Integer a, Integer b) {     // \"b\" is unused\n  compute(a);\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvoid doSomething(Integer a) {\n  compute(a);\n}\n\u003c/pre\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "apex:S105",
            "repo": "apex",
            "name": "Tabulation characters should not be used",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe tab width can differ from one development environment to another. Using tabs may require other developers to configure their environment (text\neditor, preferences, etc.) to read source code.\u003c/p\u003e\n\u003cp\u003eThat is why using spaces is preferable.\u003c/p\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe tab width can differ from one development environment to another. Using tabs may require other developers to configure their environment (text\neditor, preferences, etc.) to read source code.\u003c/p\u003e\n\u003cp\u003eThat is why using spaces is preferable.\u003c/p\u003e",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eThe tab width can differ from one development environment to another. Using tabs may require other developers to configure their environment (text\neditor, preferences, etc.) to read source code.\u003c/p\u003e\n\u003cp\u003eThat is why using spaces is preferable.\u003c/p\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "FORMATTED",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "apex:S104",
            "repo": "apex",
            "name": "Files should not have too many lines of code",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen a source file grows too much, it can accumulate numerous responsibilities and become challenging to understand and maintain.\u003c/p\u003e\n\u003cp\u003eAbove a specific threshold, refactor the file into smaller files whose code focuses on well-defined tasks. Those smaller files will be easier to\nunderstand and test.\u003c/p\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen a source file grows too much, it can accumulate numerous responsibilities and become challenging to understand and maintain.\u003c/p\u003e\n\u003cp\u003eAbove a specific threshold, refactor the file into smaller files whose code focuses on well-defined tasks. Those smaller files will be easier to\nunderstand and test.\u003c/p\u003e",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "brain-overload"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [
                {
                    "key": "Max",
                    "htmlDesc": "Maximum authorized lines of code in a file.",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "1h",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "1h",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1h",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1h",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eWhen a source file grows too much, it can accumulate numerous responsibilities and become challenging to understand and maintain.\u003c/p\u003e\n\u003cp\u003eAbove a specific threshold, refactor the file into smaller files whose code focuses on well-defined tasks. Those smaller files will be easier to\nunderstand and test.\u003c/p\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "FOCUSED",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "apex:S107",
            "repo": "apex",
            "name": "Functions should not have too many parameters",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eFunctions with a long parameter list are difficult to use, as maintainers must figure out the role of each parameter and keep track of their\nposition.\u003c/p\u003e\n\u003cpre\u003e\nvoid setCoordinates(Integer  x1, Integer  y1, Integer  z1, Integer  x2, Integer  y2, Integer  z2) { // Noncompliant\n    // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eThe solution can be to:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Split the function into smaller ones \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\n// Each function does a part of what the original setCoordinates function was doing, so confusion risks are lower\nvoid setOrigin(Integer  x, Integer  y, Integer  z) {\n   // ...\n}\n\nvoid setSize(Integer width, Integer height, Integer depth) {\n   // ...\n}\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e Find a better data structure for the parameters that group data in a way that makes sense for the specific application domain \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\npublic class Point { // In geometry, Point is a logical structure to group data\n    Integer  x;\n    Integer  y;\n    Integer  z;\n}\n\nvoid setCoordinates(Point p1, Point p2) {\n    // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eThis rule raises an issue when a function has more parameters than the provided threshold.\u003c/p\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eFunctions with a long parameter list are difficult to use, as maintainers must figure out the role of each parameter and keep track of their\nposition.\u003c/p\u003e\n\u003cpre\u003e\nvoid setCoordinates(Integer  x1, Integer  y1, Integer  z1, Integer  x2, Integer  y2, Integer  z2) { // Noncompliant\n    // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eThe solution can be to:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Split the function into smaller ones \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\n// Each function does a part of what the original setCoordinates function was doing, so confusion risks are lower\nvoid setOrigin(Integer  x, Integer  y, Integer  z) {\n   // ...\n}\n\nvoid setSize(Integer width, Integer height, Integer depth) {\n   // ...\n}\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e Find a better data structure for the parameters that group data in a way that makes sense for the specific application domain \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\npublic class Point { // In geometry, Point is a logical structure to group data\n    Integer  x;\n    Integer  y;\n    Integer  z;\n}\n\nvoid setCoordinates(Point p1, Point p2) {\n    // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eThis rule raises an issue when a function has more parameters than the provided threshold.\u003c/p\u003e",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "brain-overload"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [
                {
                    "key": "Max",
                    "htmlDesc": "Maximum authorized number of parameters",
                    "defaultValue": "7",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eFunctions with a long parameter list are difficult to use, as maintainers must figure out the role of each parameter and keep track of their\nposition.\u003c/p\u003e\n\u003cpre\u003e\nvoid setCoordinates(Integer  x1, Integer  y1, Integer  z1, Integer  x2, Integer  y2, Integer  z2) { // Noncompliant\n    // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eThe solution can be to:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Split the function into smaller ones \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\n// Each function does a part of what the original setCoordinates function was doing, so confusion risks are lower\nvoid setOrigin(Integer  x, Integer  y, Integer  z) {\n   // ...\n}\n\nvoid setSize(Integer width, Integer height, Integer depth) {\n   // ...\n}\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e Find a better data structure for the parameters that group data in a way that makes sense for the specific application domain \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\npublic class Point { // In geometry, Point is a logical structure to group data\n    Integer  x;\n    Integer  y;\n    Integer  z;\n}\n\nvoid setCoordinates(Point p1, Point p2) {\n    // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eThis rule raises an issue when a function has more parameters than the provided threshold.\u003c/p\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "FOCUSED",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "apex:S108",
            "repo": "apex",
            "name": "Nested blocks of code should not be left empty",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAn empty code block is confusing. It will require some effort from maintainers to determine if it is intentional or indicates the implementation is\nincomplete.\u003c/p\u003e\n\u003cpre\u003e\nif (i \u0026lt; 10) {} // Noncompliant: is the block empty on purpose, or is code missing?\n\u003c/pre\u003e\n\u003cp\u003eRemoving or filling the empty code blocks takes away ambiguity and generally results in a more straightforward and less surprising code.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule ignores code blocks that contain comments.\u003c/p\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAn empty code block is confusing. It will require some effort from maintainers to determine if it is intentional or indicates the implementation is\nincomplete.\u003c/p\u003e\n\u003cpre\u003e\nif (i \u0026lt; 10) {} // Noncompliant: is the block empty on purpose, or is code missing?\n\u003c/pre\u003e\n\u003cp\u003eRemoving or filling the empty code blocks takes away ambiguity and generally results in a more straightforward and less surprising code.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule ignores code blocks that contain comments.\u003c/p\u003e",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "suspicious"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eAn empty code block is confusing. It will require some effort from maintainers to determine if it is intentional or indicates the implementation is\nincomplete.\u003c/p\u003e\n\u003cpre\u003e\nif (i \u0026lt; 10) {} // Noncompliant: is the block empty on purpose, or is code missing?\n\u003c/pre\u003e\n\u003cp\u003eRemoving or filling the empty code blocks takes away ambiguity and generally results in a more straightforward and less surprising code.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule ignores code blocks that contain comments.\u003c/p\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "apex:S1940",
            "repo": "apex",
            "name": "Boolean checks should not be inverted",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIt is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif ( !(a \u003d\u003d 2)) { ...}  // Noncompliant\nBoolean b \u003d !(i \u0026lt; 10);  // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nif (a !\u003d 2) { ...}\nBoolean b \u003d (i \u0026gt;\u003d 10);\n\u003c/pre\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIt is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif ( !(a \u003d\u003d 2)) { ...}  // Noncompliant\nBoolean b \u003d !(i \u0026lt; 10);  // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nif (a !\u003d 2) { ...}\nBoolean b \u003d (i \u0026gt;\u003d 10);\n\u003c/pre\u003e",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eIt is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif ( !(a \u003d\u003d 2)) { ...}  // Noncompliant\nBoolean b \u003d !(i \u0026lt; 10);  // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nif (a !\u003d 2) { ...}\nBoolean b \u003d (i \u0026gt;\u003d 10);\n\u003c/pre\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "apex:S1862",
            "repo": "apex",
            "name": "Related \"if\"/\"else if\" statements and \"when\" in a \"switch\" should not have the same condition",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA \u003ccode\u003eswitch\u003c/code\u003e and a chain of \u003ccode\u003eif\u003c/code\u003e/\u003ccode\u003eelse if\u003c/code\u003e statements is evaluated from top to bottom. At most, only one branch will\nbe executed: the first one with a condition that evaluates to \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eTherefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it’s simply dead code and\nat worst, it’s a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.\u003c/p\u003e\n\u003cp\u003eFor a \u003ccode\u003eswitch\u003c/code\u003e, the second \u003ccode\u003ewhen\u003c/code\u003e will never be executed, rendering it dead code. Worse there is the risk in this situation\nthat future maintenance will be done on the dead case, rather than on the one that’s actually used.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif (param \u003d\u003d 1) {\n  openWindow();\n} else if (param \u003d\u003d 2) {\n  closeWindow();\n} else if (param \u003d\u003d 1) { // Noncompliant\n  moveWindowToTheBackground();\n}\n\nswitch on i {\n  when 1 {\n    // ...\n  }\n  when 2 {\n    // ...\n  }\n  when 1 { // Noncompliant\n    // ...\n  }\n  when else {\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nif (param \u003d\u003d 1) {\n  openWindow();\n} else if (param \u003d\u003d 2) {\n  closeWindow();\n} else if (param \u003d\u003d 3) {\n  moveWindowToTheBackground();\n}\n\nswitch on i {\n  when 1 {\n    // ...\n  }\n  when 2 {\n    // ...\n  }\n  when else {\n    // ...\n  }\n}\n\u003c/pre\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA \u003ccode\u003eswitch\u003c/code\u003e and a chain of \u003ccode\u003eif\u003c/code\u003e/\u003ccode\u003eelse if\u003c/code\u003e statements is evaluated from top to bottom. At most, only one branch will\nbe executed: the first one with a condition that evaluates to \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eTherefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it’s simply dead code and\nat worst, it’s a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.\u003c/p\u003e\n\u003cp\u003eFor a \u003ccode\u003eswitch\u003c/code\u003e, the second \u003ccode\u003ewhen\u003c/code\u003e will never be executed, rendering it dead code. Worse there is the risk in this situation\nthat future maintenance will be done on the dead case, rather than on the one that’s actually used.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif (param \u003d\u003d 1) {\n  openWindow();\n} else if (param \u003d\u003d 2) {\n  closeWindow();\n} else if (param \u003d\u003d 1) { // Noncompliant\n  moveWindowToTheBackground();\n}\n\nswitch on i {\n  when 1 {\n    // ...\n  }\n  when 2 {\n    // ...\n  }\n  when 1 { // Noncompliant\n    // ...\n  }\n  when else {\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nif (param \u003d\u003d 1) {\n  openWindow();\n} else if (param \u003d\u003d 2) {\n  closeWindow();\n} else if (param \u003d\u003d 3) {\n  moveWindowToTheBackground();\n}\n\nswitch on i {\n  when 1 {\n    // ...\n  }\n  when 2 {\n    // ...\n  }\n  when else {\n    // ...\n  }\n}\n\u003c/pre\u003e",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall",
                "unused"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eA \u003ccode\u003eswitch\u003c/code\u003e and a chain of \u003ccode\u003eif\u003c/code\u003e/\u003ccode\u003eelse if\u003c/code\u003e statements is evaluated from top to bottom. At most, only one branch will\nbe executed: the first one with a condition that evaluates to \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eTherefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it’s simply dead code and\nat worst, it’s a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.\u003c/p\u003e\n\u003cp\u003eFor a \u003ccode\u003eswitch\u003c/code\u003e, the second \u003ccode\u003ewhen\u003c/code\u003e will never be executed, rendering it dead code. Worse there is the risk in this situation\nthat future maintenance will be done on the dead case, rather than on the one that’s actually used.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif (param \u003d\u003d 1) {\n  openWindow();\n} else if (param \u003d\u003d 2) {\n  closeWindow();\n} else if (param \u003d\u003d 1) { // Noncompliant\n  moveWindowToTheBackground();\n}\n\nswitch on i {\n  when 1 {\n    // ...\n  }\n  when 2 {\n    // ...\n  }\n  when 1 { // Noncompliant\n    // ...\n  }\n  when else {\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nif (param \u003d\u003d 1) {\n  openWindow();\n} else if (param \u003d\u003d 2) {\n  closeWindow();\n} else if (param \u003d\u003d 3) {\n  moveWindowToTheBackground();\n}\n\nswitch on i {\n  when 1 {\n    // ...\n  }\n  when 2 {\n    // ...\n  }\n  when else {\n    // ...\n  }\n}\n\u003c/pre\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "apex:S1145",
            "repo": "apex",
            "name": "Useless \"if(true) {...}\" and \"if(false){...}\" blocks should be removed",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eif\u003c/code\u003e statements with conditions that are always false have the effect of making blocks of code non-functional. \u003ccode\u003eif\u003c/code\u003e\nstatements with conditions that are always true are completely redundant, and make the code less readable.\u003c/p\u003e\n\u003cp\u003eThere are three possible causes for the presence of such code:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e An if statement was changed during debugging and that debug code has been committed. \u003c/li\u003e\n  \u003cli\u003e Some value was left unset. \u003c/li\u003e\n  \u003cli\u003e Some logic is not doing what the programmer thought it did. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn any of these cases, unconditional \u003ccode\u003eif\u003c/code\u003e statements should be removed.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n  if (true) {\n    doSomething();\n  }\n  // ...\n  if (false) {\n    doSomethingElse();\n  }\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n  doSomething();\n  // ...\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/489\"\u003eMITRE, CWE-489\u003c/a\u003e - Active Debug Code \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/570\"\u003eMITRE, CWE-570\u003c/a\u003e - Expression is Always False \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/571\"\u003eMITRE, CWE-571\u003c/a\u003e - Expression is Always True \u003c/li\u003e\n\u003c/ul\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eif\u003c/code\u003e statements with conditions that are always false have the effect of making blocks of code non-functional. \u003ccode\u003eif\u003c/code\u003e\nstatements with conditions that are always true are completely redundant, and make the code less readable.\u003c/p\u003e\n\u003cp\u003eThere are three possible causes for the presence of such code:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e An if statement was changed during debugging and that debug code has been committed. \u003c/li\u003e\n  \u003cli\u003e Some value was left unset. \u003c/li\u003e\n  \u003cli\u003e Some logic is not doing what the programmer thought it did. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn any of these cases, unconditional \u003ccode\u003eif\u003c/code\u003e statements should be removed.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n  if (true) {\n    doSomething();\n  }\n  // ...\n  if (false) {\n    doSomethingElse();\n  }\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n  doSomething();\n  // ...\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/489\"\u003eMITRE, CWE-489\u003c/a\u003e - Active Debug Code \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/570\"\u003eMITRE, CWE-570\u003c/a\u003e - Expression is Always False \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/571\"\u003eMITRE, CWE-571\u003c/a\u003e - Expression is Always True \u003c/li\u003e\n\u003c/ul\u003e",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003e\u003ccode\u003eif\u003c/code\u003e statements with conditions that are always false have the effect of making blocks of code non-functional. \u003ccode\u003eif\u003c/code\u003e\nstatements with conditions that are always true are completely redundant, and make the code less readable.\u003c/p\u003e\n\u003cp\u003eThere are three possible causes for the presence of such code:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e An if statement was changed during debugging and that debug code has been committed. \u003c/li\u003e\n  \u003cli\u003e Some value was left unset. \u003c/li\u003e\n  \u003cli\u003e Some logic is not doing what the programmer thought it did. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn any of these cases, unconditional \u003ccode\u003eif\u003c/code\u003e statements should be removed.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n  if (true) {\n    doSomething();\n  }\n  // ...\n  if (false) {\n    doSomethingElse();\n  }\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n  doSomething();\n  // ...\n\u003c/pre\u003e"
                },
                {
                    "key": "resources",
                    "content": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/489\"\u003eMITRE, CWE-489\u003c/a\u003e - Active Debug Code \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/570\"\u003eMITRE, CWE-570\u003c/a\u003e - Expression is Always False \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/571\"\u003eMITRE, CWE-571\u003c/a\u003e - Expression is Always True \u003c/li\u003e\n\u003c/ul\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "apex:S1144",
            "repo": "apex",
            "name": "Unused \"private\" methods should be removed",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eprivate\u003c/code\u003e methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code\ndecreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.\u003c/p\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eprivate\u003c/code\u003e methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code\ndecreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.\u003c/p\u003e",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "unused"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003e\u003ccode\u003eprivate\u003c/code\u003e methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code\ndecreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.\u003c/p\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "apex:S1067",
            "repo": "apex",
            "name": "Expressions should not be too complex",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe complexity of an expression is defined by the number of \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e and \u003ccode\u003e||\u003c/code\u003e operators it contains.\u003c/p\u003e\n\u003cp\u003eA single expression’s complexity should not become too high to keep the code readable.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default threshold value of 3:\u003c/p\u003e\n\u003cpre\u003e\nif (((condition1 \u0026amp;\u0026amp; condition2) || (condition3 \u0026amp;\u0026amp; condition4)) \u0026amp;\u0026amp; condition5) { ... }\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nif ((myFirstCondition || mySecondCondition) \u0026amp;\u0026amp; myLastCondition) { ... }\n\u003c/pre\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe complexity of an expression is defined by the number of \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e and \u003ccode\u003e||\u003c/code\u003e operators it contains.\u003c/p\u003e\n\u003cp\u003eA single expression’s complexity should not become too high to keep the code readable.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default threshold value of 3:\u003c/p\u003e\n\u003cpre\u003e\nif (((condition1 \u0026amp;\u0026amp; condition2) || (condition3 \u0026amp;\u0026amp; condition4)) \u0026amp;\u0026amp; condition5) { ... }\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nif ((myFirstCondition || mySecondCondition) \u0026amp;\u0026amp; myLastCondition) { ... }\n\u003c/pre\u003e",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "brain-overload"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [
                {
                    "key": "max",
                    "htmlDesc": "Maximum number of allowed conditional operators in an expression",
                    "defaultValue": "3",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "LINEAR_OFFSET",
            "defaultDebtRemFnCoeff": "1min",
            "defaultDebtRemFnOffset": "5min",
            "effortToFixDescription": "per complexity point above the threshold",
            "debtOverloaded": false,
            "debtRemFnType": "LINEAR_OFFSET",
            "debtRemFnCoeff": "1min",
            "debtRemFnOffset": "5min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "LINEAR_OFFSET",
            "defaultRemFnGapMultiplier": "1min",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "LINEAR_OFFSET",
            "remFnGapMultiplier": "1min",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "gapDescription": "per complexity point above the threshold",
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eThe complexity of an expression is defined by the number of \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e and \u003ccode\u003e||\u003c/code\u003e operators it contains.\u003c/p\u003e\n\u003cp\u003eA single expression’s complexity should not become too high to keep the code readable.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default threshold value of 3:\u003c/p\u003e\n\u003cpre\u003e\nif (((condition1 \u0026amp;\u0026amp; condition2) || (condition3 \u0026amp;\u0026amp; condition4)) \u0026amp;\u0026amp; condition5) { ... }\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nif ((myFirstCondition || mySecondCondition) \u0026amp;\u0026amp; myLastCondition) { ... }\n\u003c/pre\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "FOCUSED",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "apex:S5387",
            "repo": "apex",
            "name": "\"getRecordTypeInfosByDeveloperName()\" should be used instead of \"getRecordTypeInfosByName()\"",
            "createdAt": "2019-08-21T15:36:47+0200",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUsing \u003ccode\u003egetRecordTypeInfosByName()\u003c/code\u003e requires you to pass the Record Type Name. A Record Type Name is a label, which means that it can be\neasily changed by an administrator. When this happens, the code will simply stop working until a developer updates the Record Type Name. Even worse,\nLabels are usually translated in multi-language environments, which will again make the code fail.\u003c/p\u003e\n\u003cp\u003eThe method getRecordTypeInfosByDeveloperName() also enables you to get the Record Type Id, but it requires instead a Record Type API Name, which is\nrarely changed.\u003c/p\u003e\n\u003cp\u003eThus it is safer to use \u003ccode\u003egetRecordTypeInfosByDeveloperName()\u003c/code\u003e than \u003ccode\u003egetRecordTypeInfosByName()\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nId RTId \u003d Schema.SObjectType.Case.getRecordTypeInfosByName().get(\u0027Asia Service\u0027).getRecordTypeId();\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nId RTId \u003d Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(\u0027Asia_Service\u0027).getRecordTypeId();\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://smukov.github.io/blog/2018/06/09/Record-Type-Id-By-Developer-Name/\"\u003eGet Record Type Id by Developer Name\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUsing \u003ccode\u003egetRecordTypeInfosByName()\u003c/code\u003e requires you to pass the Record Type Name. A Record Type Name is a label, which means that it can be\neasily changed by an administrator. When this happens, the code will simply stop working until a developer updates the Record Type Name. Even worse,\nLabels are usually translated in multi-language environments, which will again make the code fail.\u003c/p\u003e\n\u003cp\u003eThe method getRecordTypeInfosByDeveloperName() also enables you to get the Record Type Id, but it requires instead a Record Type API Name, which is\nrarely changed.\u003c/p\u003e\n\u003cp\u003eThus it is safer to use \u003ccode\u003egetRecordTypeInfosByDeveloperName()\u003c/code\u003e than \u003ccode\u003egetRecordTypeInfosByName()\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nId RTId \u003d Schema.SObjectType.Case.getRecordTypeInfosByName().get(\u0027Asia Service\u0027).getRecordTypeId();\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nId RTId \u003d Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(\u0027Asia_Service\u0027).getRecordTypeId();\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://smukov.github.io/blog/2018/06/09/Record-Type-Id-By-Developer-Name/\"\u003eGet Record Type Id by Developer Name\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://smukov.github.io/blog/2018/06/09/Record-Type-Id-By-Developer-Name/\"\u003eGet Record Type Id by Developer Name\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
                },
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eUsing \u003ccode\u003egetRecordTypeInfosByName()\u003c/code\u003e requires you to pass the Record Type Name. A Record Type Name is a label, which means that it can be\neasily changed by an administrator. When this happens, the code will simply stop working until a developer updates the Record Type Name. Even worse,\nLabels are usually translated in multi-language environments, which will again make the code fail.\u003c/p\u003e\n\u003cp\u003eThe method getRecordTypeInfosByDeveloperName() also enables you to get the Record Type Id, but it requires instead a Record Type API Name, which is\nrarely changed.\u003c/p\u003e\n\u003cp\u003eThus it is safer to use \u003ccode\u003egetRecordTypeInfosByDeveloperName()\u003c/code\u003e than \u003ccode\u003egetRecordTypeInfosByName()\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nId RTId \u003d Schema.SObjectType.Case.getRecordTypeInfosByName().get(\u0027Asia Service\u0027).getRecordTypeId();\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nId RTId \u003d Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(\u0027Asia_Service\u0027).getRecordTypeId();\n\u003c/pre\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "apex:S1066",
            "repo": "apex",
            "name": "Collapsible \"if\" statements should be merged",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eMerging collapsible \u003ccode\u003eif\u003c/code\u003e statements increases the code’s readability.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif (condition1)\n{\n  if (condition2)\n  {\n    ...\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nif (condition1 \u0026amp;\u0026amp; condition2)\n{\n  ...\n}\n\u003c/pre\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eMerging collapsible \u003ccode\u003eif\u003c/code\u003e statements increases the code’s readability.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif (condition1)\n{\n  if (condition2)\n  {\n    ...\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nif (condition1 \u0026amp;\u0026amp; condition2)\n{\n  ...\n}\n\u003c/pre\u003e",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eMerging collapsible \u003ccode\u003eif\u003c/code\u003e statements increases the code’s readability.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif (condition1)\n{\n  if (condition2)\n  {\n    ...\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nif (condition1 \u0026amp;\u0026amp; condition2)\n{\n  ...\n}\n\u003c/pre\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "apex:S1186",
            "repo": "apex",
            "name": "Methods should not be empty",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThere are several reasons for a method not to have a method body:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. \u003c/li\u003e\n  \u003cli\u003e It is not yet, or never will be, supported. In this case an exception should be thrown. \u003c/li\u003e\n  \u003cli\u003e The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic void doSomething() {\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic void doSomething() {\n  // Do nothing because of X and Y.\n}\n\u003c/pre\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThere are several reasons for a method not to have a method body:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. \u003c/li\u003e\n  \u003cli\u003e It is not yet, or never will be, supported. In this case an exception should be thrown. \u003c/li\u003e\n  \u003cli\u003e The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic void doSomething() {\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic void doSomething() {\n  // Do nothing because of X and Y.\n}\n\u003c/pre\u003e",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "suspicious"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eThere are several reasons for a method not to have a method body:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. \u003c/li\u003e\n  \u003cli\u003e It is not yet, or never will be, supported. In this case an exception should be thrown. \u003c/li\u003e\n  \u003cli\u003e The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic void doSomething() {\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic void doSomething() {\n  // Do nothing because of X and Y.\n}\n\u003c/pre\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "apex:S5389",
            "repo": "apex",
            "name": "URLs of Salesforce pages should be relative, not absolute.",
            "createdAt": "2019-08-21T15:36:47+0200",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUsing absolute URLs to Salesforce Pages is bug prone. Different sandboxes and production environments will have different instance names (like\n\"na10\", \"na15\" etc.). Code using absolute URLs will only work when it runs in the corresponding salesforce instances. It will break as soon as it is\ndeployed in another one. Thus only relative URLs, i.e. without the domain and subdomain names, should be used when pointing to a salesforce page.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a string matches the regular expression:\u003c/p\u003e\n\u003cp\u003e{noformat}\u003c/p\u003e\n\u003cp\u003e(?\u0026lt;!\\w)(login|test|(dns|test|[a-z]{1,2})\\d++)\\.(salesforce|force|visual\\.force|content\\.force)\\.com(?!\\w)\u003c/p\u003e\n\u003cp\u003e{noformat}\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic PageReference testRedirect() {\n    String strUrl \u003d\u0027https://na8.salesforce.com/TestVFPage?AcoountId\u003d999\u0027; // Noncompliant\n    PageReference newUrl \u003d new PageReference(strUrl);\n    newURL.setRedirect(true);\n    return newURL;\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic PageReference testRedirect() {\n    String strUrl \u003d URL.getSalesforceBaseUrl().toExternalForm() + \u0027/TestVFPage?AcoountId\u003d999\u0027;\n    PageReference newUrl \u003d new PageReference(strUrl);\n    newURL.setRedirect(true);\n    return newURL;\n}\nOR\npublic PageReference testRedirect() {\n    String strUrl \u003d URL.getOrgDomainUrl().toExternalForm() + \u0027/TestVFPage?AcoountId\u003d999\u0027;\n    PageReference newUrl \u003d new PageReference(strUrl);\n    newURL.setRedirect(true);\n    return newURL;\n}\n\u003c/pre\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUsing absolute URLs to Salesforce Pages is bug prone. Different sandboxes and production environments will have different instance names (like\n\"na10\", \"na15\" etc.). Code using absolute URLs will only work when it runs in the corresponding salesforce instances. It will break as soon as it is\ndeployed in another one. Thus only relative URLs, i.e. without the domain and subdomain names, should be used when pointing to a salesforce page.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a string matches the regular expression:\u003c/p\u003e\n\u003cp\u003e{noformat}\u003c/p\u003e\n\u003cp\u003e(?\u0026lt;!\\w)(login|test|(dns|test|[a-z]{1,2})\\d++)\\.(salesforce|force|visual\\.force|content\\.force)\\.com(?!\\w)\u003c/p\u003e\n\u003cp\u003e{noformat}\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic PageReference testRedirect() {\n    String strUrl \u003d\u0027https://na8.salesforce.com/TestVFPage?AcoountId\u003d999\u0027; // Noncompliant\n    PageReference newUrl \u003d new PageReference(strUrl);\n    newURL.setRedirect(true);\n    return newURL;\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic PageReference testRedirect() {\n    String strUrl \u003d URL.getSalesforceBaseUrl().toExternalForm() + \u0027/TestVFPage?AcoountId\u003d999\u0027;\n    PageReference newUrl \u003d new PageReference(strUrl);\n    newURL.setRedirect(true);\n    return newURL;\n}\nOR\npublic PageReference testRedirect() {\n    String strUrl \u003d URL.getOrgDomainUrl().toExternalForm() + \u0027/TestVFPage?AcoountId\u003d999\u0027;\n    PageReference newUrl \u003d new PageReference(strUrl);\n    newURL.setRedirect(true);\n    return newURL;\n}\n\u003c/pre\u003e",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eUsing absolute URLs to Salesforce Pages is bug prone. Different sandboxes and production environments will have different instance names (like\n\"na10\", \"na15\" etc.). Code using absolute URLs will only work when it runs in the corresponding salesforce instances. It will break as soon as it is\ndeployed in another one. Thus only relative URLs, i.e. without the domain and subdomain names, should be used when pointing to a salesforce page.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a string matches the regular expression:\u003c/p\u003e\n\u003cp\u003e{noformat}\u003c/p\u003e\n\u003cp\u003e(?\u0026lt;!\\w)(login|test|(dns|test|[a-z]{1,2})\\d++)\\.(salesforce|force|visual\\.force|content\\.force)\\.com(?!\\w)\u003c/p\u003e\n\u003cp\u003e{noformat}\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic PageReference testRedirect() {\n    String strUrl \u003d\u0027https://na8.salesforce.com/TestVFPage?AcoountId\u003d999\u0027; // Noncompliant\n    PageReference newUrl \u003d new PageReference(strUrl);\n    newURL.setRedirect(true);\n    return newURL;\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic PageReference testRedirect() {\n    String strUrl \u003d URL.getSalesforceBaseUrl().toExternalForm() + \u0027/TestVFPage?AcoountId\u003d999\u0027;\n    PageReference newUrl \u003d new PageReference(strUrl);\n    newURL.setRedirect(true);\n    return newURL;\n}\nOR\npublic PageReference testRedirect() {\n    String strUrl \u003d URL.getOrgDomainUrl().toExternalForm() + \u0027/TestVFPage?AcoountId\u003d999\u0027;\n    PageReference newUrl \u003d new PageReference(strUrl);\n    newURL.setRedirect(true);\n    return newURL;\n}\n\u003c/pre\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "apex:S122",
            "repo": "apex",
            "name": "Statements should be on separate lines",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003ePutting multiple statements on a single line lowers the code readability and makes debugging the code more complex.\u003c/p\u003e\n\u003cpre\u003e\na \u003d true; return 0; // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eWrite one statement per line to improve readability.\u003c/p\u003e\n\u003cpre\u003e\na \u003d true;\nreturn 0;\n\u003c/pre\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003ePutting multiple statements on a single line lowers the code readability and makes debugging the code more complex.\u003c/p\u003e\n\u003cpre\u003e\na \u003d true; return 0; // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eWrite one statement per line to improve readability.\u003c/p\u003e\n\u003cpre\u003e\na \u003d true;\nreturn 0;\n\u003c/pre\u003e",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "1min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "1min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003ePutting multiple statements on a single line lowers the code readability and makes debugging the code more complex.\u003c/p\u003e\n\u003cpre\u003e\na \u003d true; return 0; // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eWrite one statement per line to improve readability.\u003c/p\u003e\n\u003cpre\u003e\na \u003d true;\nreturn 0;\n\u003c/pre\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "FORMATTED",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "apex:S2757",
            "repo": "apex",
            "name": "Non-existent operators like \"\u003d+\" should not be used",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUsing operator pairs (\u003ccode\u003e\u003d+\u003c/code\u003e, \u003ccode\u003e\u003d-\u003c/code\u003e, or \u003ccode\u003e\u003d!\u003c/code\u003e) that look like reversed single operators (\u003ccode\u003e+\u003d\u003c/code\u003e,\n\u003ccode\u003e-\u003d\u003c/code\u003e or \u003ccode\u003e!\u003d\u003c/code\u003e) is confusing. They compile and run but do not produce the same result as their mirrored counterpart.\u003c/p\u003e\n\u003cpre\u003e\nInteger target \u003d -5;\nInteger num \u003d 3;\n\ntarget \u003d- num;  // Noncompliant: target \u003d -3. Is that the expected behavior?\ntarget \u003d+ num; // Noncompliant: target \u003d 3\n\u003c/pre\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003e\u003d+\u003c/code\u003e, \u003ccode\u003e\u003d-\u003c/code\u003e, or \u003ccode\u003e\u003d!\u003c/code\u003e are used without any space between the operators and when there\nis at least one whitespace after.\u003c/p\u003e\n\u003cp\u003eReplace the operators with a single one if that is the intention.\u003c/p\u003e\n\u003cpre\u003e\nInteger target \u003d -5;\nInteger num \u003d 3;\n\ntarget -\u003d num;  // target \u003d -8\n\u003c/pre\u003e\n\u003cp\u003eOr fix the spacing to avoid confusion\u003c/p\u003e\n\u003cpre\u003e\nInteger target \u003d -5;\nInteger num \u003d 3;\n\ntarget \u003d -num;  // target \u003d -3\n\u003c/pre\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUsing operator pairs (\u003ccode\u003e\u003d+\u003c/code\u003e, \u003ccode\u003e\u003d-\u003c/code\u003e, or \u003ccode\u003e\u003d!\u003c/code\u003e) that look like reversed single operators (\u003ccode\u003e+\u003d\u003c/code\u003e,\n\u003ccode\u003e-\u003d\u003c/code\u003e or \u003ccode\u003e!\u003d\u003c/code\u003e) is confusing. They compile and run but do not produce the same result as their mirrored counterpart.\u003c/p\u003e\n\u003cpre\u003e\nInteger target \u003d -5;\nInteger num \u003d 3;\n\ntarget \u003d- num;  // Noncompliant: target \u003d -3. Is that the expected behavior?\ntarget \u003d+ num; // Noncompliant: target \u003d 3\n\u003c/pre\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003e\u003d+\u003c/code\u003e, \u003ccode\u003e\u003d-\u003c/code\u003e, or \u003ccode\u003e\u003d!\u003c/code\u003e are used without any space between the operators and when there\nis at least one whitespace after.\u003c/p\u003e\n\u003cp\u003eReplace the operators with a single one if that is the intention.\u003c/p\u003e\n\u003cpre\u003e\nInteger target \u003d -5;\nInteger num \u003d 3;\n\ntarget -\u003d num;  // target \u003d -8\n\u003c/pre\u003e\n\u003cp\u003eOr fix the spacing to avoid confusion\u003c/p\u003e\n\u003cpre\u003e\nInteger target \u003d -5;\nInteger num \u003d 3;\n\ntarget \u003d -num;  // target \u003d -3\n\u003c/pre\u003e",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eUsing operator pairs (\u003ccode\u003e\u003d+\u003c/code\u003e, \u003ccode\u003e\u003d-\u003c/code\u003e, or \u003ccode\u003e\u003d!\u003c/code\u003e) that look like reversed single operators (\u003ccode\u003e+\u003d\u003c/code\u003e,\n\u003ccode\u003e-\u003d\u003c/code\u003e or \u003ccode\u003e!\u003d\u003c/code\u003e) is confusing. They compile and run but do not produce the same result as their mirrored counterpart.\u003c/p\u003e\n\u003cpre\u003e\nInteger target \u003d -5;\nInteger num \u003d 3;\n\ntarget \u003d- num;  // Noncompliant: target \u003d -3. Is that the expected behavior?\ntarget \u003d+ num; // Noncompliant: target \u003d 3\n\u003c/pre\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003e\u003d+\u003c/code\u003e, \u003ccode\u003e\u003d-\u003c/code\u003e, or \u003ccode\u003e\u003d!\u003c/code\u003e are used without any space between the operators and when there\nis at least one whitespace after.\u003c/p\u003e\n\u003cp\u003eReplace the operators with a single one if that is the intention.\u003c/p\u003e\n\u003cpre\u003e\nInteger target \u003d -5;\nInteger num \u003d 3;\n\ntarget -\u003d num;  // target \u003d -8\n\u003c/pre\u003e\n\u003cp\u003eOr fix the spacing to avoid confusion\u003c/p\u003e\n\u003cpre\u003e\nInteger target \u003d -5;\nInteger num \u003d 3;\n\ntarget \u003d -num;  // target \u003d -3\n\u003c/pre\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "apex:S3923",
            "repo": "apex",
            "name": "All branches in a conditional structure should not have exactly the same implementation",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eHaving all branches of a \u003ccode\u003eswitch\u003c/code\u003e or \u003ccode\u003eif\u003c/code\u003e chain with the same implementation indicates a problem.\u003c/p\u003e\n\u003cp\u003eIn the following code:\u003c/p\u003e\n\u003cpre\u003e\nif (b \u003d\u003d 0) {  // Noncompliant\n  doOneMoreThing();\n} else {\n  doOneMoreThing();\n}\n\nswitch on i {  // Noncompliant\n  when 1 {\n    doSomething();\n  }\n  when 2 {\n    doSomething();\n  }\n  when 3 {\n    doSomething();\n  }\n  when else {\n    doSomething();\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eEither there is a copy-paste error that needs fixing or an unnecessary \u003ccode\u003eswitch\u003c/code\u003e or \u003ccode\u003eif\u003c/code\u003e chain that needs removing.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule does not apply to \u003ccode\u003eif\u003c/code\u003e chains without \u003ccode\u003eelse\u003c/code\u003e, nor to \u003ccode\u003eswitch\u003c/code\u003e without a \u003ccode\u003edefault\u003c/code\u003e clause.\u003c/p\u003e\n\u003cpre\u003e\nif(b \u003d\u003d 0) {    //no issue, this could have been done on purpose to make the code more readable\n  doSomething();\n} else if(b \u003d\u003d 1) {\n  doSomething();\n}\n\u003c/pre\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eHaving all branches of a \u003ccode\u003eswitch\u003c/code\u003e or \u003ccode\u003eif\u003c/code\u003e chain with the same implementation indicates a problem.\u003c/p\u003e\n\u003cp\u003eIn the following code:\u003c/p\u003e\n\u003cpre\u003e\nif (b \u003d\u003d 0) {  // Noncompliant\n  doOneMoreThing();\n} else {\n  doOneMoreThing();\n}\n\nswitch on i {  // Noncompliant\n  when 1 {\n    doSomething();\n  }\n  when 2 {\n    doSomething();\n  }\n  when 3 {\n    doSomething();\n  }\n  when else {\n    doSomething();\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eEither there is a copy-paste error that needs fixing or an unnecessary \u003ccode\u003eswitch\u003c/code\u003e or \u003ccode\u003eif\u003c/code\u003e chain that needs removing.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule does not apply to \u003ccode\u003eif\u003c/code\u003e chains without \u003ccode\u003eelse\u003c/code\u003e, nor to \u003ccode\u003eswitch\u003c/code\u003e without a \u003ccode\u003edefault\u003c/code\u003e clause.\u003c/p\u003e\n\u003cpre\u003e\nif(b \u003d\u003d 0) {    //no issue, this could have been done on purpose to make the code more readable\n  doSomething();\n} else if(b \u003d\u003d 1) {\n  doSomething();\n}\n\u003c/pre\u003e",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eHaving all branches of a \u003ccode\u003eswitch\u003c/code\u003e or \u003ccode\u003eif\u003c/code\u003e chain with the same implementation indicates a problem.\u003c/p\u003e\n\u003cp\u003eIn the following code:\u003c/p\u003e\n\u003cpre\u003e\nif (b \u003d\u003d 0) {  // Noncompliant\n  doOneMoreThing();\n} else {\n  doOneMoreThing();\n}\n\nswitch on i {  // Noncompliant\n  when 1 {\n    doSomething();\n  }\n  when 2 {\n    doSomething();\n  }\n  when 3 {\n    doSomething();\n  }\n  when else {\n    doSomething();\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eEither there is a copy-paste error that needs fixing or an unnecessary \u003ccode\u003eswitch\u003c/code\u003e or \u003ccode\u003eif\u003c/code\u003e chain that needs removing.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule does not apply to \u003ccode\u003eif\u003c/code\u003e chains without \u003ccode\u003eelse\u003c/code\u003e, nor to \u003ccode\u003eswitch\u003c/code\u003e without a \u003ccode\u003edefault\u003c/code\u003e clause.\u003c/p\u003e\n\u003cpre\u003e\nif(b \u003d\u003d 0) {    //no issue, this could have been done on purpose to make the code more readable\n  doSomething();\n} else if(b \u003d\u003d 1) {\n  doSomething();\n}\n\u003c/pre\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "apex:S1821",
            "repo": "apex",
            "name": "\"switch\" statements should not be nested",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eNested \u003ccode\u003eswitch\u003c/code\u003e structures are difficult to understand because you can easily confuse the \u003ccode\u003ewhen\u003c/code\u003e blocks of an inner\n\u003ccode\u003eswitch\u003c/code\u003e as belonging to an outer statement. Therefore nested \u003ccode\u003eswitch\u003c/code\u003e statements should be avoided.\u003c/p\u003e\n\u003cp\u003eSpecifically, you should structure your code to avoid the need for nested \u003ccode\u003eswitch\u003c/code\u003e statements, but if you cannot, then consider moving\nthe inner \u003ccode\u003eswitch\u003c/code\u003e to another function.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic void foo(Integer i, Integer j) {\n  switch on i {\n    when 1 {System.debug(\u0027 1\u0027); }\n    when 2 { System.debug(\u0027 2\u0027); }\n    when -3 {\n      switch on j {  // Noncompliant\n        when 1 {System.debug(\u0027 3\u0027);}\n        when else {System.debug(\u0027 4\u0027);}\n      }\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic void foo(Integer i, Integer j) {\n  switch on i {\n    when 1 {System.debug(\u0027 1\u0027); }\n    when 2 { System.debug(\u0027 2\u0027); }\n    when -3 {bar(j);}\n  }\n}\n\npublic void bar(Integer j) {\n  switch on j {\n    when 1 {System.debug(\u0027 3\u0027);}\n    when else {System.debug(\u0027 4\u0027);}\n  }\n}\n\u003c/pre\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eNested \u003ccode\u003eswitch\u003c/code\u003e structures are difficult to understand because you can easily confuse the \u003ccode\u003ewhen\u003c/code\u003e blocks of an inner\n\u003ccode\u003eswitch\u003c/code\u003e as belonging to an outer statement. Therefore nested \u003ccode\u003eswitch\u003c/code\u003e statements should be avoided.\u003c/p\u003e\n\u003cp\u003eSpecifically, you should structure your code to avoid the need for nested \u003ccode\u003eswitch\u003c/code\u003e statements, but if you cannot, then consider moving\nthe inner \u003ccode\u003eswitch\u003c/code\u003e to another function.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic void foo(Integer i, Integer j) {\n  switch on i {\n    when 1 {System.debug(\u0027 1\u0027); }\n    when 2 { System.debug(\u0027 2\u0027); }\n    when -3 {\n      switch on j {  // Noncompliant\n        when 1 {System.debug(\u0027 3\u0027);}\n        when else {System.debug(\u0027 4\u0027);}\n      }\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic void foo(Integer i, Integer j) {\n  switch on i {\n    when 1 {System.debug(\u0027 1\u0027); }\n    when 2 { System.debug(\u0027 2\u0027); }\n    when -3 {bar(j);}\n  }\n}\n\npublic void bar(Integer j) {\n  switch on j {\n    when 1 {System.debug(\u0027 3\u0027);}\n    when else {System.debug(\u0027 4\u0027);}\n  }\n}\n\u003c/pre\u003e",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eNested \u003ccode\u003eswitch\u003c/code\u003e structures are difficult to understand because you can easily confuse the \u003ccode\u003ewhen\u003c/code\u003e blocks of an inner\n\u003ccode\u003eswitch\u003c/code\u003e as belonging to an outer statement. Therefore nested \u003ccode\u003eswitch\u003c/code\u003e statements should be avoided.\u003c/p\u003e\n\u003cp\u003eSpecifically, you should structure your code to avoid the need for nested \u003ccode\u003eswitch\u003c/code\u003e statements, but if you cannot, then consider moving\nthe inner \u003ccode\u003eswitch\u003c/code\u003e to another function.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic void foo(Integer i, Integer j) {\n  switch on i {\n    when 1 {System.debug(\u0027 1\u0027); }\n    when 2 { System.debug(\u0027 2\u0027); }\n    when -3 {\n      switch on j {  // Noncompliant\n        when 1 {System.debug(\u0027 3\u0027);}\n        when else {System.debug(\u0027 4\u0027);}\n      }\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic void foo(Integer i, Integer j) {\n  switch on i {\n    when 1 {System.debug(\u0027 1\u0027); }\n    when 2 { System.debug(\u0027 2\u0027); }\n    when -3 {bar(j);}\n  }\n}\n\npublic void bar(Integer j) {\n  switch on j {\n    when 1 {System.debug(\u0027 3\u0027);}\n    when else {System.debug(\u0027 4\u0027);}\n  }\n}\n\u003c/pre\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "FOCUSED",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "apex:S5386",
            "repo": "apex",
            "name": "System.runAs should be used to test user permissions",
            "createdAt": "2019-08-21T15:36:47+0200",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eBy default tests will run in system mode, i.e. without taking into account users permissions. In order to be realistic, a test needs to run\nBusiness logic code in User context. This is done by encapsulating the tested code in \u003ca\nhref\u003d\"https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_testing_tools_runas.htm\"\u003e\u003ccode\u003eSystem.runAs()\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a test function, i.e. a function annotated with \u003ccode\u003e@isTest\u003c/code\u003e or \u003ccode\u003etestMethod\u003c/code\u003e, does not contain a\n\u003ccode\u003eSystem.runAs()\u003c/code\u003e call.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n@isTest\nprivate class TestClass {\n    @isTest\n    public static void testMethod() { // NonCompliant\n        // Setup test data\n        User u \u003d new User(...);\n        Case c \u003d new Case (Name \u003d \u0027Test\u0027);\n        Test.startTest();\n            Insert c;\n        Test.stopTest();\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n@isTest\nprivate class TestClass {\n    @isTest\n    public static void testMethod() {\n        // Setup test data\n        User u \u003d new User(...);\n        Case c \u003d new Case (Name \u003d \u0027Test\u0027);\n        System.runAs(u) {\n            Test.startTest();\n            Insert c;\n            Test.stopTest();\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eNo issue will be raised if the test class, i.e. the class annotated with \u003ccode\u003e@isTest\u003c/code\u003e, contains helper methods, i.e. methods\n\u003cstrong\u003enot\u003c/strong\u003e annotated with \u003ccode\u003e@isTest\u003c/code\u003e or \u003ccode\u003etestmethod\u003c/code\u003e, which contain calls to \u003ccode\u003eSystem.runAs()\u003c/code\u003e. This\nindicates that the test code has been factorized and the rule would raise false positives.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_testing_tools_runas.htm\"\u003eUsing the runAs Method\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eBy default tests will run in system mode, i.e. without taking into account users permissions. In order to be realistic, a test needs to run\nBusiness logic code in User context. This is done by encapsulating the tested code in \u003ca\nhref\u003d\"https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_testing_tools_runas.htm\"\u003e\u003ccode\u003eSystem.runAs()\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a test function, i.e. a function annotated with \u003ccode\u003e@isTest\u003c/code\u003e or \u003ccode\u003etestMethod\u003c/code\u003e, does not contain a\n\u003ccode\u003eSystem.runAs()\u003c/code\u003e call.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n@isTest\nprivate class TestClass {\n    @isTest\n    public static void testMethod() { // NonCompliant\n        // Setup test data\n        User u \u003d new User(...);\n        Case c \u003d new Case (Name \u003d \u0027Test\u0027);\n        Test.startTest();\n            Insert c;\n        Test.stopTest();\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n@isTest\nprivate class TestClass {\n    @isTest\n    public static void testMethod() {\n        // Setup test data\n        User u \u003d new User(...);\n        Case c \u003d new Case (Name \u003d \u0027Test\u0027);\n        System.runAs(u) {\n            Test.startTest();\n            Insert c;\n            Test.stopTest();\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eNo issue will be raised if the test class, i.e. the class annotated with \u003ccode\u003e@isTest\u003c/code\u003e, contains helper methods, i.e. methods\n\u003cstrong\u003enot\u003c/strong\u003e annotated with \u003ccode\u003e@isTest\u003c/code\u003e or \u003ccode\u003etestmethod\u003c/code\u003e, which contain calls to \u003ccode\u003eSystem.runAs()\u003c/code\u003e. This\nindicates that the test code has been factorized and the rule would raise false positives.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_testing_tools_runas.htm\"\u003eUsing the runAs Method\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eBy default tests will run in system mode, i.e. without taking into account users permissions. In order to be realistic, a test needs to run\nBusiness logic code in User context. This is done by encapsulating the tested code in \u003ca\nhref\u003d\"https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_testing_tools_runas.htm\"\u003e\u003ccode\u003eSystem.runAs()\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a test function, i.e. a function annotated with \u003ccode\u003e@isTest\u003c/code\u003e or \u003ccode\u003etestMethod\u003c/code\u003e, does not contain a\n\u003ccode\u003eSystem.runAs()\u003c/code\u003e call.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n@isTest\nprivate class TestClass {\n    @isTest\n    public static void testMethod() { // NonCompliant\n        // Setup test data\n        User u \u003d new User(...);\n        Case c \u003d new Case (Name \u003d \u0027Test\u0027);\n        Test.startTest();\n            Insert c;\n        Test.stopTest();\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n@isTest\nprivate class TestClass {\n    @isTest\n    public static void testMethod() {\n        // Setup test data\n        User u \u003d new User(...);\n        Case c \u003d new Case (Name \u003d \u0027Test\u0027);\n        System.runAs(u) {\n            Test.startTest();\n            Insert c;\n            Test.stopTest();\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eNo issue will be raised if the test class, i.e. the class annotated with \u003ccode\u003e@isTest\u003c/code\u003e, contains helper methods, i.e. methods\n\u003cstrong\u003enot\u003c/strong\u003e annotated with \u003ccode\u003e@isTest\u003c/code\u003e or \u003ccode\u003etestmethod\u003c/code\u003e, which contain calls to \u003ccode\u003eSystem.runAs()\u003c/code\u003e. This\nindicates that the test code has been factorized and the rule would raise false positives.\u003c/p\u003e"
                },
                {
                    "key": "resources",
                    "content": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_testing_tools_runas.htm\"\u003eUsing the runAs Method\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "TESTED",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "apex:S117",
            "repo": "apex",
            "name": "Local variable and method parameter names should comply with a naming convention",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eShared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does\nnot match the provided regular expression.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^[a-z][a-zA-Z0-9_]*$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\npublic void doSomething(Integer PARAM) { // Noncompliant\n  Integer LOCAL; // Noncompliant\n  ...\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic void doSomething(Integer param) {\n  Integer local;\n  ...\n}\n\u003c/pre\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eShared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does\nnot match the provided regular expression.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^[a-z][a-zA-Z0-9_]*$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\npublic void doSomething(Integer PARAM) { // Noncompliant\n  Integer LOCAL; // Noncompliant\n  ...\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic void doSomething(Integer param) {\n  Integer local;\n  ...\n}\n\u003c/pre\u003e",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [
                {
                    "key": "format",
                    "htmlDesc": "Regular expression used to check the names against.",
                    "defaultValue": "^[a-z][a-zA-Z0-9_]*$",
                    "type": "STRING"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eShared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does\nnot match the provided regular expression.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^[a-z][a-zA-Z0-9_]*$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\npublic void doSomething(Integer PARAM) { // Noncompliant\n  Integer LOCAL; // Noncompliant\n  ...\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic void doSomething(Integer param) {\n  Integer local;\n  ...\n}\n\u003c/pre\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "IDENTIFIABLE",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "apex:S5382",
            "repo": "apex",
            "name": "DML statements should not be used inside loops",
            "createdAt": "2019-08-21T15:36:47+0200",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn order to protect shared resources, Salesforce enforces a maximum number of DML statements which can be executed inside a single \u003ca\nhref\u003d\"https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_transaction.htm\"\u003etransaction\u003c/a\u003e. This is part of \u003ca\nhref\u003d\"https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_gov_limits.htm\"\u003eGovernor limits\u003c/a\u003e. If a DML statement is nested\ninside a loop’s body (For/While/Do-While) it might be executed more times than the Governor limit allows, making the code fail.\u003c/p\u003e\n\u003cp\u003eThus it is a best practice to not have DML statements nested in the body of loops and instead perform the DML operation on a list of sObjects.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when it detects DML statements inside a loop.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class myDMLLoop {\n    public static void myFunction() {\n        for (Task task: [Select Id, subject from Task]) {\n            if (task.subject \u003d\u003d \u0027foo\u0027) {\n                task.subject \u003d \u0027bar\u0027;\n                update task; // Noncompliant\n            }\n        }\n    }\n}\n// Query in a while loop\npublic class myDMLLoop {\n    public static void myFunction(Task[] tasks) {\n        Integer i \u003d 0;\n        while ( i \u0026lt; 1000) {\n            Task task \u003d tasks[i];\n            if (task.subject \u003d\u003d \u0027foo\u0027) {\n                task.subject \u003d \u0027bar\u0027;\n                update task; // Noncompliant\n            }\n        }\n    }\n}\n\n// Query in a do-while loop\npublic class myDMLLoop {\n    public static void myFunction(Task[] tasks) {\n        Integer i \u003d 0;\n        do {\n            Task task \u003d tasks[i];\n            if (task.subject \u003d\u003d \u0027foo\u0027) {\n                task.subject \u003d \u0027bar\u0027;\n                update task; // Noncompliant\n            }\n            i++;\n        } while (i \u0026lt; 1000);\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class myDMLLoop {\n  \tpublic static void myFunction() {\n\t\tList\u0026lt;Task\u0026gt; updatedTasks \u003d new List\u0026lt;Task\u0026gt;();\n        for (Task task: [Select Id, subject from Task]) {\n            if (task.subject \u003d\u003d \u0027foo\u0027) {\n                task.subject \u003d \u0027bar\u0027;\n                updatedTasks.add(task);\n            }\n        }\n        update updatedTasks;\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.salesforce.com/index.php?title\u003dApex_Code_Best_Practices\u0026amp;oldid\u003d26951\"\u003eApex Code Best Practices\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/langCon_apex_loops_for_SOQL.htm\"\u003eSOQL For Loops\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn order to protect shared resources, Salesforce enforces a maximum number of DML statements which can be executed inside a single \u003ca\nhref\u003d\"https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_transaction.htm\"\u003etransaction\u003c/a\u003e. This is part of \u003ca\nhref\u003d\"https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_gov_limits.htm\"\u003eGovernor limits\u003c/a\u003e. If a DML statement is nested\ninside a loop’s body (For/While/Do-While) it might be executed more times than the Governor limit allows, making the code fail.\u003c/p\u003e\n\u003cp\u003eThus it is a best practice to not have DML statements nested in the body of loops and instead perform the DML operation on a list of sObjects.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when it detects DML statements inside a loop.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class myDMLLoop {\n    public static void myFunction() {\n        for (Task task: [Select Id, subject from Task]) {\n            if (task.subject \u003d\u003d \u0027foo\u0027) {\n                task.subject \u003d \u0027bar\u0027;\n                update task; // Noncompliant\n            }\n        }\n    }\n}\n// Query in a while loop\npublic class myDMLLoop {\n    public static void myFunction(Task[] tasks) {\n        Integer i \u003d 0;\n        while ( i \u0026lt; 1000) {\n            Task task \u003d tasks[i];\n            if (task.subject \u003d\u003d \u0027foo\u0027) {\n                task.subject \u003d \u0027bar\u0027;\n                update task; // Noncompliant\n            }\n        }\n    }\n}\n\n// Query in a do-while loop\npublic class myDMLLoop {\n    public static void myFunction(Task[] tasks) {\n        Integer i \u003d 0;\n        do {\n            Task task \u003d tasks[i];\n            if (task.subject \u003d\u003d \u0027foo\u0027) {\n                task.subject \u003d \u0027bar\u0027;\n                update task; // Noncompliant\n            }\n            i++;\n        } while (i \u0026lt; 1000);\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class myDMLLoop {\n  \tpublic static void myFunction() {\n\t\tList\u0026lt;Task\u0026gt; updatedTasks \u003d new List\u0026lt;Task\u0026gt;();\n        for (Task task: [Select Id, subject from Task]) {\n            if (task.subject \u003d\u003d \u0027foo\u0027) {\n                task.subject \u003d \u0027bar\u0027;\n                updatedTasks.add(task);\n            }\n        }\n        update updatedTasks;\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.salesforce.com/index.php?title\u003dApex_Code_Best_Practices\u0026amp;oldid\u003d26951\"\u003eApex Code Best Practices\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/langCon_apex_loops_for_SOQL.htm\"\u003eSOQL For Loops\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "governor-limits"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.salesforce.com/index.php?title\u003dApex_Code_Best_Practices\u0026amp;oldid\u003d26951\"\u003eApex Code Best Practices\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/langCon_apex_loops_for_SOQL.htm\"\u003eSOQL For Loops\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
                },
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eIn order to protect shared resources, Salesforce enforces a maximum number of DML statements which can be executed inside a single \u003ca\nhref\u003d\"https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_transaction.htm\"\u003etransaction\u003c/a\u003e. This is part of \u003ca\nhref\u003d\"https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_gov_limits.htm\"\u003eGovernor limits\u003c/a\u003e. If a DML statement is nested\ninside a loop’s body (For/While/Do-While) it might be executed more times than the Governor limit allows, making the code fail.\u003c/p\u003e\n\u003cp\u003eThus it is a best practice to not have DML statements nested in the body of loops and instead perform the DML operation on a list of sObjects.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when it detects DML statements inside a loop.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class myDMLLoop {\n    public static void myFunction() {\n        for (Task task: [Select Id, subject from Task]) {\n            if (task.subject \u003d\u003d \u0027foo\u0027) {\n                task.subject \u003d \u0027bar\u0027;\n                update task; // Noncompliant\n            }\n        }\n    }\n}\n// Query in a while loop\npublic class myDMLLoop {\n    public static void myFunction(Task[] tasks) {\n        Integer i \u003d 0;\n        while ( i \u0026lt; 1000) {\n            Task task \u003d tasks[i];\n            if (task.subject \u003d\u003d \u0027foo\u0027) {\n                task.subject \u003d \u0027bar\u0027;\n                update task; // Noncompliant\n            }\n        }\n    }\n}\n\n// Query in a do-while loop\npublic class myDMLLoop {\n    public static void myFunction(Task[] tasks) {\n        Integer i \u003d 0;\n        do {\n            Task task \u003d tasks[i];\n            if (task.subject \u003d\u003d \u0027foo\u0027) {\n                task.subject \u003d \u0027bar\u0027;\n                update task; // Noncompliant\n            }\n            i++;\n        } while (i \u0026lt; 1000);\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class myDMLLoop {\n  \tpublic static void myFunction() {\n\t\tList\u0026lt;Task\u0026gt; updatedTasks \u003d new List\u0026lt;Task\u0026gt;();\n        for (Task task: [Select Id, subject from Task]) {\n            if (task.subject \u003d\u003d \u0027foo\u0027) {\n                task.subject \u003d \u0027bar\u0027;\n                updatedTasks.add(task);\n            }\n        }\n        update updatedTasks;\n    }\n}\n\u003c/pre\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "COMPLETE",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "apex:S1871",
            "repo": "apex",
            "name": "Two branches in a conditional structure should not have exactly the same implementation",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eHaving two \u003ccode\u003ewhen\u003c/code\u003es in a \u003ccode\u003eswitch\u003c/code\u003e statement or two branches in an \u003ccode\u003eif\u003c/code\u003e chain with the same implementation is at\nbest duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an \u003ccode\u003eif\u003c/code\u003e chain they should\nbe combined, or for a \u003ccode\u003eswitch\u003c/code\u003e, one should fall through to the other.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nswitch on i {\n  when 1 {\n    doFirstThing();\n    doSomething();\n  }\n  when 2 {\n    doSomethingDifferent();\n  }\n  when 3 {  // Noncompliant; duplicates when 1\u0027s implementation\n    doFirstThing();\n    doSomething();\n  }\n  when else {\n    doTheRest();\n  }\n}\n\nif (a \u0026gt;\u003d 0 \u0026amp;\u0026amp; a \u0026lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a \u0026gt;\u003d 10 \u0026amp;\u0026amp; a \u0026lt; 20) {\n  doTheOtherThing();\n}\nelse if (a \u0026gt;\u003d 20 \u0026amp;\u0026amp; a \u0026lt; 50) {\n  doFirstThing();\n  doTheThing();  // Noncompliant; duplicates first condition\n}\nelse {\n  doTheRest();\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eBlocks in an \u003ccode\u003eif\u003c/code\u003e chain that contain a single line of code are ignored, as are blocks in a \u003ccode\u003eswitch\u003c/code\u003e statement that contain a\nsingle line of code with or without a following \u003ccode\u003ebreak\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nif(a \u003d\u003d 1) {\n  doSomething();  //no issue, usually this is done on purpose to increase the readability\n} else if (a \u003d\u003d 2) {\n  doSomethingElse();\n} else {\n  doSomething();\n}\n\u003c/pre\u003e\n\u003cp\u003eBut this exception does not apply to \u003ccode\u003eif\u003c/code\u003e chains without \u003ccode\u003eelse\u003c/code\u003e-s, or to \u003ccode\u003eswitch\u003c/code\u003e-es without default clauses when\nall branches have the same single line of code. In case of \u003ccode\u003eif\u003c/code\u003e chains with \u003ccode\u003eelse\u003c/code\u003e-s, or of \u003ccode\u003eswitch\u003c/code\u003e-es with default\nclauses, rule \u003ca href\u003d\u0027/organizations/microsoft/rules?open\u003dapex%3AS3923\u0026rule_key\u003dapex%3AS3923\u0027\u003eS3923\u003c/a\u003e raises a bug.\u003c/p\u003e\n\u003cpre\u003e\nif(a \u003d\u003d 1) {\n  doSomething();  //Noncompliant, this might have been done on purpose but probably not\n} else if (a \u003d\u003d 2) {\n  doSomething();\n}\n\u003c/pre\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eHaving two \u003ccode\u003ewhen\u003c/code\u003es in a \u003ccode\u003eswitch\u003c/code\u003e statement or two branches in an \u003ccode\u003eif\u003c/code\u003e chain with the same implementation is at\nbest duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an \u003ccode\u003eif\u003c/code\u003e chain they should\nbe combined, or for a \u003ccode\u003eswitch\u003c/code\u003e, one should fall through to the other.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nswitch on i {\n  when 1 {\n    doFirstThing();\n    doSomething();\n  }\n  when 2 {\n    doSomethingDifferent();\n  }\n  when 3 {  // Noncompliant; duplicates when 1\u0027s implementation\n    doFirstThing();\n    doSomething();\n  }\n  when else {\n    doTheRest();\n  }\n}\n\nif (a \u0026gt;\u003d 0 \u0026amp;\u0026amp; a \u0026lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a \u0026gt;\u003d 10 \u0026amp;\u0026amp; a \u0026lt; 20) {\n  doTheOtherThing();\n}\nelse if (a \u0026gt;\u003d 20 \u0026amp;\u0026amp; a \u0026lt; 50) {\n  doFirstThing();\n  doTheThing();  // Noncompliant; duplicates first condition\n}\nelse {\n  doTheRest();\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eBlocks in an \u003ccode\u003eif\u003c/code\u003e chain that contain a single line of code are ignored, as are blocks in a \u003ccode\u003eswitch\u003c/code\u003e statement that contain a\nsingle line of code with or without a following \u003ccode\u003ebreak\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nif(a \u003d\u003d 1) {\n  doSomething();  //no issue, usually this is done on purpose to increase the readability\n} else if (a \u003d\u003d 2) {\n  doSomethingElse();\n} else {\n  doSomething();\n}\n\u003c/pre\u003e\n\u003cp\u003eBut this exception does not apply to \u003ccode\u003eif\u003c/code\u003e chains without \u003ccode\u003eelse\u003c/code\u003e-s, or to \u003ccode\u003eswitch\u003c/code\u003e-es without default clauses when\nall branches have the same single line of code. In case of \u003ccode\u003eif\u003c/code\u003e chains with \u003ccode\u003eelse\u003c/code\u003e-s, or of \u003ccode\u003eswitch\u003c/code\u003e-es with default\nclauses, rule {rule:apex:S3923} raises a bug.\u003c/p\u003e\n\u003cpre\u003e\nif(a \u003d\u003d 1) {\n  doSomething();  //Noncompliant, this might have been done on purpose but probably not\n} else if (a \u003d\u003d 2) {\n  doSomething();\n}\n\u003c/pre\u003e",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "design",
                "suspicious"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eHaving two \u003ccode\u003ewhen\u003c/code\u003es in a \u003ccode\u003eswitch\u003c/code\u003e statement or two branches in an \u003ccode\u003eif\u003c/code\u003e chain with the same implementation is at\nbest duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an \u003ccode\u003eif\u003c/code\u003e chain they should\nbe combined, or for a \u003ccode\u003eswitch\u003c/code\u003e, one should fall through to the other.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nswitch on i {\n  when 1 {\n    doFirstThing();\n    doSomething();\n  }\n  when 2 {\n    doSomethingDifferent();\n  }\n  when 3 {  // Noncompliant; duplicates when 1\u0027s implementation\n    doFirstThing();\n    doSomething();\n  }\n  when else {\n    doTheRest();\n  }\n}\n\nif (a \u0026gt;\u003d 0 \u0026amp;\u0026amp; a \u0026lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a \u0026gt;\u003d 10 \u0026amp;\u0026amp; a \u0026lt; 20) {\n  doTheOtherThing();\n}\nelse if (a \u0026gt;\u003d 20 \u0026amp;\u0026amp; a \u0026lt; 50) {\n  doFirstThing();\n  doTheThing();  // Noncompliant; duplicates first condition\n}\nelse {\n  doTheRest();\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eBlocks in an \u003ccode\u003eif\u003c/code\u003e chain that contain a single line of code are ignored, as are blocks in a \u003ccode\u003eswitch\u003c/code\u003e statement that contain a\nsingle line of code with or without a following \u003ccode\u003ebreak\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nif(a \u003d\u003d 1) {\n  doSomething();  //no issue, usually this is done on purpose to increase the readability\n} else if (a \u003d\u003d 2) {\n  doSomethingElse();\n} else {\n  doSomething();\n}\n\u003c/pre\u003e\n\u003cp\u003eBut this exception does not apply to \u003ccode\u003eif\u003c/code\u003e chains without \u003ccode\u003eelse\u003c/code\u003e-s, or to \u003ccode\u003eswitch\u003c/code\u003e-es without default clauses when\nall branches have the same single line of code. In case of \u003ccode\u003eif\u003c/code\u003e chains with \u003ccode\u003eelse\u003c/code\u003e-s, or of \u003ccode\u003eswitch\u003c/code\u003e-es with default\nclauses, rule \u003ca href\u003d\u0027/organizations/microsoft/rules?open\u003dapex%3AS3923\u0026rule_key\u003dapex%3AS3923\u0027\u003eS3923\u003c/a\u003e raises a bug.\u003c/p\u003e\n\u003cpre\u003e\nif(a \u003d\u003d 1) {\n  doSomething();  //Noncompliant, this might have been done on purpose but probably not\n} else if (a \u003d\u003d 2) {\n  doSomething();\n}\n\u003c/pre\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "DISTINCT",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "apex:S1110",
            "repo": "apex",
            "name": "Redundant pairs of parentheses should be removed",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nInteger x \u003d (y / 2 + 1);   //Compliant even if the parenthesis are ignored by the compiler\n\nif (a \u0026amp;\u0026amp; ((x+y \u0026gt; 0))) {  // Noncompliant\n  //...\n}\n\nreturn ((x + 1));  // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nInteger x \u003d (y / 2 + 1);\n\nif (a \u0026amp;\u0026amp; (x+y \u0026gt; 0)) {\n  //...\n}\n\nreturn (x + 1);\n\u003c/pre\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nInteger x \u003d (y / 2 + 1);   //Compliant even if the parenthesis are ignored by the compiler\n\nif (a \u0026amp;\u0026amp; ((x+y \u0026gt; 0))) {  // Noncompliant\n  //...\n}\n\nreturn ((x + 1));  // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nInteger x \u003d (y / 2 + 1);\n\nif (a \u0026amp;\u0026amp; (x+y \u0026gt; 0)) {\n  //...\n}\n\nreturn (x + 1);\n\u003c/pre\u003e",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "confusing"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "1min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "1min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eThe use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nInteger x \u003d (y / 2 + 1);   //Compliant even if the parenthesis are ignored by the compiler\n\nif (a \u0026amp;\u0026amp; ((x+y \u0026gt; 0))) {  // Noncompliant\n  //...\n}\n\nreturn ((x + 1));  // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nInteger x \u003d (y / 2 + 1);\n\nif (a \u0026amp;\u0026amp; (x+y \u0026gt; 0)) {\n  //...\n}\n\nreturn (x + 1);\n\u003c/pre\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "apex:S131",
            "repo": "apex",
            "name": "\"switch\" statements should have \"when else\" clauses",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe requirement for a final \u003ccode\u003ewhen else\u003c/code\u003e clause is defensive programming. The clause should either take appropriate action, or contain a\nsuitable comment as to why no action is taken.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nswitch on i { // missing \u0027when else\u0027\n  when 2 {\n    System.debug(\u0027when block 2\u0027);\n  }\n  when -3 {\n    System.debug(\u0027when block -3\u0027);\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nswitch on i {\n  when 2 {\n    System.debug(\u0027when block 2\u0027);\n  }\n  when -3 {\n    System.debug(\u0027when block -3\u0027);\n  }\n  when else {\n    System.debug(\u0027default\u0027);\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/478\"\u003eMITRE, CWE-478\u003c/a\u003e - Missing Default Case in Switch Statement \u003c/li\u003e\n\u003c/ul\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe requirement for a final \u003ccode\u003ewhen else\u003c/code\u003e clause is defensive programming. The clause should either take appropriate action, or contain a\nsuitable comment as to why no action is taken.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nswitch on i { // missing \u0027when else\u0027\n  when 2 {\n    System.debug(\u0027when block 2\u0027);\n  }\n  when -3 {\n    System.debug(\u0027when block -3\u0027);\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nswitch on i {\n  when 2 {\n    System.debug(\u0027when block 2\u0027);\n  }\n  when -3 {\n    System.debug(\u0027when block -3\u0027);\n  }\n  when else {\n    System.debug(\u0027default\u0027);\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/478\"\u003eMITRE, CWE-478\u003c/a\u003e - Missing Default Case in Switch Statement \u003c/li\u003e\n\u003c/ul\u003e",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/478\"\u003eMITRE, CWE-478\u003c/a\u003e - Missing Default Case in Switch Statement \u003c/li\u003e\n\u003c/ul\u003e"
                },
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eThe requirement for a final \u003ccode\u003ewhen else\u003c/code\u003e clause is defensive programming. The clause should either take appropriate action, or contain a\nsuitable comment as to why no action is taken.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nswitch on i { // missing \u0027when else\u0027\n  when 2 {\n    System.debug(\u0027when block 2\u0027);\n  }\n  when -3 {\n    System.debug(\u0027when block -3\u0027);\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nswitch on i {\n  when 2 {\n    System.debug(\u0027when block 2\u0027);\n  }\n  when -3 {\n    System.debug(\u0027when block -3\u0027);\n  }\n  when else {\n    System.debug(\u0027default\u0027);\n  }\n}\n\u003c/pre\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "apex:S4144",
            "repo": "apex",
            "name": "Methods should not have identical implementations",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eTwo methods having the same implementation are suspicious. It might be that something else was intended. Or the duplication is intentional, which\nbecomes a maintenance burden.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprivate String code \u003d \u0027secret\u0027;\n\npublic String calculateCode() {\n  doTheThing();\n  return code;\n}\n\npublic String getName() {  // Noncompliant: duplicates calculateCode\n  doTheThing();\n  return code;\n}\n\u003c/pre\u003e\n\u003cp\u003eIf the identical logic is intentional, the code should be refactored to avoid duplication. For example, by having both methods call the same method\nor by having one implementation invoke the other.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprivate String code \u003d \u0027secret\u0027;\n\npublic String getCode() {\n  doTheThing();\n  return code;\n}\n\npublic String getName() { // Intent is clear\n  return getCode();\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eMethods that are not accessors (getters and setters), with fewer than 2 statements are ignored.\u003c/p\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eTwo methods having the same implementation are suspicious. It might be that something else was intended. Or the duplication is intentional, which\nbecomes a maintenance burden.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprivate String code \u003d \u0027secret\u0027;\n\npublic String calculateCode() {\n  doTheThing();\n  return code;\n}\n\npublic String getName() {  // Noncompliant: duplicates calculateCode\n  doTheThing();\n  return code;\n}\n\u003c/pre\u003e\n\u003cp\u003eIf the identical logic is intentional, the code should be refactored to avoid duplication. For example, by having both methods call the same method\nor by having one implementation invoke the other.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprivate String code \u003d \u0027secret\u0027;\n\npublic String getCode() {\n  doTheThing();\n  return code;\n}\n\npublic String getName() { // Intent is clear\n  return getCode();\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eMethods that are not accessors (getters and setters), with fewer than 2 statements are ignored.\u003c/p\u003e",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "confusing",
                "duplicate",
                "suspicious"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eTwo methods having the same implementation are suspicious. It might be that something else was intended. Or the duplication is intentional, which\nbecomes a maintenance burden.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprivate String code \u003d \u0027secret\u0027;\n\npublic String calculateCode() {\n  doTheThing();\n  return code;\n}\n\npublic String getName() {  // Noncompliant: duplicates calculateCode\n  doTheThing();\n  return code;\n}\n\u003c/pre\u003e\n\u003cp\u003eIf the identical logic is intentional, the code should be refactored to avoid duplication. For example, by having both methods call the same method\nor by having one implementation invoke the other.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprivate String code \u003d \u0027secret\u0027;\n\npublic String getCode() {\n  doTheThing();\n  return code;\n}\n\npublic String getName() { // Intent is clear\n  return getCode();\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eMethods that are not accessors (getters and setters), with fewer than 2 statements are ignored.\u003c/p\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "DISTINCT",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "apex:S134",
            "repo": "apex",
            "name": "Control flow statements \"if\", \"for\", \"while\", \"switch\" and \"try\" should not be nested too deeply",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eNested \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003efor\u003c/code\u003e, \u003ccode\u003ewhile\u003c/code\u003e, \u003ccode\u003eswitch\u003c/code\u003e, and \u003ccode\u003etry\u003c/code\u003e statements are key ingredients for making\nwhat’s known as \"Spaghetti code\".\u003c/p\u003e\n\u003cp\u003eSuch code is hard to read, refactor and therefore maintain.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default threshold of 3:\u003c/p\u003e\n\u003cpre\u003e\nswitch on i { // Compliant - depth \u003d 1\n  when 1 {\n    /* ... */\n    for (Integer i \u003d 0, j \u003d 0; i \u0026lt; 10; i++) { // Compliant - depth \u003d 2\n      /* ... */\n      Integer j \u003d i + 1;\n      if(j \u003d\u003d 0){// Compliant - depth \u003d 3, not exceeding the limit\n        /* ... */\n        while(j \u0026lt; 10){ // Noncompliant - depth \u003d 4\n          /* ... */\n          if(j \u003d\u003d 1){ // Depth \u003d 5, exceeding the limit, but issues are only reported on depth \u003d 4\n            /* ... */\n          }\n        }\n      }\n    }\n  }\n}\n\u003c/pre\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eNested \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003efor\u003c/code\u003e, \u003ccode\u003ewhile\u003c/code\u003e, \u003ccode\u003eswitch\u003c/code\u003e, and \u003ccode\u003etry\u003c/code\u003e statements are key ingredients for making\nwhat’s known as \"Spaghetti code\".\u003c/p\u003e\n\u003cp\u003eSuch code is hard to read, refactor and therefore maintain.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default threshold of 3:\u003c/p\u003e\n\u003cpre\u003e\nswitch on i { // Compliant - depth \u003d 1\n  when 1 {\n    /* ... */\n    for (Integer i \u003d 0, j \u003d 0; i \u0026lt; 10; i++) { // Compliant - depth \u003d 2\n      /* ... */\n      Integer j \u003d i + 1;\n      if(j \u003d\u003d 0){// Compliant - depth \u003d 3, not exceeding the limit\n        /* ... */\n        while(j \u0026lt; 10){ // Noncompliant - depth \u003d 4\n          /* ... */\n          if(j \u003d\u003d 1){ // Depth \u003d 5, exceeding the limit, but issues are only reported on depth \u003d 4\n            /* ... */\n          }\n        }\n      }\n    }\n  }\n}\n\u003c/pre\u003e",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "brain-overload"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [
                {
                    "key": "max",
                    "htmlDesc": "Maximum allowed control flow statement nesting depth",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eNested \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003efor\u003c/code\u003e, \u003ccode\u003ewhile\u003c/code\u003e, \u003ccode\u003eswitch\u003c/code\u003e, and \u003ccode\u003etry\u003c/code\u003e statements are key ingredients for making\nwhat’s known as \"Spaghetti code\".\u003c/p\u003e\n\u003cp\u003eSuch code is hard to read, refactor and therefore maintain.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default threshold of 3:\u003c/p\u003e\n\u003cpre\u003e\nswitch on i { // Compliant - depth \u003d 1\n  when 1 {\n    /* ... */\n    for (Integer i \u003d 0, j \u003d 0; i \u0026lt; 10; i++) { // Compliant - depth \u003d 2\n      /* ... */\n      Integer j \u003d i + 1;\n      if(j \u003d\u003d 0){// Compliant - depth \u003d 3, not exceeding the limit\n        /* ... */\n        while(j \u0026lt; 10){ // Noncompliant - depth \u003d 4\n          /* ... */\n          if(j \u003d\u003d 1){ // Depth \u003d 5, exceeding the limit, but issues are only reported on depth \u003d 4\n            /* ... */\n          }\n        }\n      }\n    }\n  }\n}\n\u003c/pre\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "FOCUSED",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "apex:S4663",
            "repo": "apex",
            "name": "Multi-line comments should not be empty",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eEmpty comments like the following don’t improve readability and might indicate an oversight.\u003c/p\u003e\n\u003cpre\u003e\n/*  */\n\n/*\n\n */\n\u003c/pre\u003e\n\u003cp\u003eA meaningful text should be added to the comment or the comment markers should be removed.\u003c/p\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eEmpty comments like the following don’t improve readability and might indicate an oversight.\u003c/p\u003e\n\u003cpre\u003e\n/*  */\n\n/*\n\n */\n\u003c/pre\u003e\n\u003cp\u003eA meaningful text should be added to the comment or the comment markers should be removed.\u003c/p\u003e",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "1min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "1min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eEmpty comments like the following don’t improve readability and might indicate an oversight.\u003c/p\u003e\n\u003cpre\u003e\n/*  */\n\n/*\n\n */\n\u003c/pre\u003e\n\u003cp\u003eA meaningful text should be added to the comment or the comment markers should be removed.\u003c/p\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "apex:S1479",
            "repo": "apex",
            "name": "\"switch\" statements should not have too many \"case\" clauses",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen \u003ccode\u003eswitch\u003c/code\u003e statements have large sets of \u003ccode\u003ecase\u003c/code\u003e clauses, it is usually an attempt to map two sets of data. A real map\nstructure would be more readable and maintainable, and should be used instead.\u003c/p\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen \u003ccode\u003eswitch\u003c/code\u003e statements have large sets of \u003ccode\u003ecase\u003c/code\u003e clauses, it is usually an attempt to map two sets of data. A real map\nstructure would be more readable and maintainable, and should be used instead.\u003c/p\u003e",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "brain-overload"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [
                {
                    "key": "maximum",
                    "htmlDesc": "Maximum number of branches",
                    "defaultValue": "30",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "30min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "30min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eWhen \u003ccode\u003eswitch\u003c/code\u003e statements have large sets of \u003ccode\u003ecase\u003c/code\u003e clauses, it is usually an attempt to map two sets of data. A real map\nstructure would be more readable and maintainable, and should be used instead.\u003c/p\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "FOCUSED",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "apex:S125",
            "repo": "apex",
            "name": "Sections of code should not be commented out",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eProgrammers should not comment out code as it bloats programs and reduces readability.\u003c/p\u003e\n\u003cp\u003eUnused code should be deleted and can be retrieved from source control history if required.\u003c/p\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eProgrammers should not comment out code as it bloats programs and reduces readability.\u003c/p\u003e\n\u003cp\u003eUnused code should be deleted and can be retrieved from source control history if required.\u003c/p\u003e",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "unused"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eProgrammers should not comment out code as it bloats programs and reduces readability.\u003c/p\u003e\n\u003cp\u003eUnused code should be deleted and can be retrieved from source control history if required.\u003c/p\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "apex:S5395",
            "repo": "apex",
            "name": "Test methods should not be annotated with \"@isTest(SeeAllData\u003dtrue)\"",
            "createdAt": "2019-08-21T15:36:47+0200",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eSeeAllData\u003dtrue\u003c/code\u003e should not be used because it gives your tests access to all data in your organization. Activating this option makes\nyour test dependent on existing data and more difficult to maintain. Tests should create their own data.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when it sees \u003ccode\u003e@isTest(SeeAllData\u003dtrue)\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n@isTest(SeeAllData\u003dtrue) // Noncompliant\npublic class MyTestClass {\n    @isTest(SeeAllData\u003dtrue) // Noncompliant\n    static void myTestMethod() {\n        // Can access all data in the organization.\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_testing_seealldata_using.htm\"\u003eSalesforce documentation -\n  Using the isTest(SeeAllData\u003dTrue) Annotation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eSeeAllData\u003dtrue\u003c/code\u003e should not be used because it gives your tests access to all data in your organization. Activating this option makes\nyour test dependent on existing data and more difficult to maintain. Tests should create their own data.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when it sees \u003ccode\u003e@isTest(SeeAllData\u003dtrue)\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n@isTest(SeeAllData\u003dtrue) // Noncompliant\npublic class MyTestClass {\n    @isTest(SeeAllData\u003dtrue) // Noncompliant\n    static void myTestMethod() {\n        // Can access all data in the organization.\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_testing_seealldata_using.htm\"\u003eSalesforce documentation -\n  Using the isTest(SeeAllData\u003dTrue) Annotation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003e\u003ccode\u003eSeeAllData\u003dtrue\u003c/code\u003e should not be used because it gives your tests access to all data in your organization. Activating this option makes\nyour test dependent on existing data and more difficult to maintain. Tests should create their own data.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when it sees \u003ccode\u003e@isTest(SeeAllData\u003dtrue)\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n@isTest(SeeAllData\u003dtrue) // Noncompliant\npublic class MyTestClass {\n    @isTest(SeeAllData\u003dtrue) // Noncompliant\n    static void myTestMethod() {\n        // Can access all data in the organization.\n    }\n}\n\u003c/pre\u003e"
                },
                {
                    "key": "resources",
                    "content": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_testing_seealldata_using.htm\"\u003eSalesforce documentation -\n  Using the isTest(SeeAllData\u003dTrue) Annotation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "MODULAR",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "apex:S1151",
            "repo": "apex",
            "name": "\"when\" clauses should not have too many lines of code",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eswitch\u003c/code\u003e statement should be used only to clearly define some new branches in the control flow. As soon as a \u003ccode\u003ewhen\u003c/code\u003e\nclause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the\n\u003ccode\u003ewhen\u003c/code\u003e clause should be extracted into a dedicated function.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the threshold set at \u003ccode\u003e5\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\npublic void foo(Integer value) {\n  switch on value {\n    when 1 {\n      methodCall1(\u0027\u0027);\n      methodCall2(\u0027\u0027);\n      methodCall3(\u0027\u0027);\n      methodCall4(\u0027\u0027);\n      methodCall5(\u0027\u0027);\n    }\n    when 2 { /* ... */ }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic void foo(Integer value) {\n  switch on value {\n    when 1 { doSomething(); }\n    when 2 { /* ... */ }\n    }\n  }\n}\n\nprivate void doSomething() {\n  methodCall1(\u0027\u0027);\n  methodCall2(\u0027\u0027);\n  methodCall3(\u0027\u0027);\n  methodCall4(\u0027\u0027);\n  methodCall5(\u0027\u0027);\n}\n\u003c/pre\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eswitch\u003c/code\u003e statement should be used only to clearly define some new branches in the control flow. As soon as a \u003ccode\u003ewhen\u003c/code\u003e\nclause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the\n\u003ccode\u003ewhen\u003c/code\u003e clause should be extracted into a dedicated function.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the threshold set at \u003ccode\u003e5\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\npublic void foo(Integer value) {\n  switch on value {\n    when 1 {\n      methodCall1(\u0027\u0027);\n      methodCall2(\u0027\u0027);\n      methodCall3(\u0027\u0027);\n      methodCall4(\u0027\u0027);\n      methodCall5(\u0027\u0027);\n    }\n    when 2 { /* ... */ }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic void foo(Integer value) {\n  switch on value {\n    when 1 { doSomething(); }\n    when 2 { /* ... */ }\n    }\n  }\n}\n\nprivate void doSomething() {\n  methodCall1(\u0027\u0027);\n  methodCall2(\u0027\u0027);\n  methodCall3(\u0027\u0027);\n  methodCall4(\u0027\u0027);\n  methodCall5(\u0027\u0027);\n}\n\u003c/pre\u003e",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "brain-overload"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [
                {
                    "key": "max",
                    "htmlDesc": "Maximum number of lines",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eThe \u003ccode\u003eswitch\u003c/code\u003e statement should be used only to clearly define some new branches in the control flow. As soon as a \u003ccode\u003ewhen\u003c/code\u003e\nclause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the\n\u003ccode\u003ewhen\u003c/code\u003e clause should be extracted into a dedicated function.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the threshold set at \u003ccode\u003e5\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\npublic void foo(Integer value) {\n  switch on value {\n    when 1 {\n      methodCall1(\u0027\u0027);\n      methodCall2(\u0027\u0027);\n      methodCall3(\u0027\u0027);\n      methodCall4(\u0027\u0027);\n      methodCall5(\u0027\u0027);\n    }\n    when 2 { /* ... */ }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic void foo(Integer value) {\n  switch on value {\n    when 1 { doSomething(); }\n    when 2 { /* ... */ }\n    }\n  }\n}\n\nprivate void doSomething() {\n  methodCall1(\u0027\u0027);\n  methodCall2(\u0027\u0027);\n  methodCall3(\u0027\u0027);\n  methodCall4(\u0027\u0027);\n  methodCall5(\u0027\u0027);\n}\n\u003c/pre\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "FOCUSED",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "apex:S5394",
            "repo": "apex",
            "name": "Tested code should be enclosed between \"Test.StartTest()\" and \"Test.StopTest()\"",
            "createdAt": "2019-08-21T15:36:47+0200",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn order to protect shared resources, Salesforce enforces a maximum number of SOQL queries, DML queries, \u003ccode\u003e@future\u003c/code\u003e method, etc…​\nexecution inside a single \u003ca href\u003d\"https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_transaction.htm\"\u003etransaction\u003c/a\u003e.\nThis is part of \u003ca href\u003d\"https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_gov_limits.htm\"\u003eGovernor limits\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eEvery test method should check how close the tested code is to reach the governor limits. This is done by calling \u003ccode\u003eTest.StartTest()\u003c/code\u003e\nbefore the tested code and \u003ccode\u003eTest.StopTest()\u003c/code\u003e after it.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a test method, i.e. a method annotated with \u003ccode\u003e@isTest\u003c/code\u003e or \u003ccode\u003etestmethod\u003c/code\u003e, does not contain a call\nto \u003ccode\u003eTest.StartTest()\u003c/code\u003e and \u003ccode\u003eTest.StopTest()\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n@isTest()\npublic class MyTestClass {\n    @isTest()\n    static void myTestMethod() { // Noncompliant\n        // Preparing test (creating records, etc...)\n        // test code with no reference to Test.StartTest() or Test.StopTest()\n    }\n\n    static testmethod void myTestMethod2() { // Noncompliant\n        // Preparing test (creating records, etc...)\n        // test code with no reference to Test.StartTest() or Test.StopTest()\n    }\n\n    static void myHelper() {\n        // ...\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n@isTest()\npublic class MyTestClass {\n    @isTest()\n    static void myTestMethod() {\n        // Preparing test (creating records, etc...)\n        Test.StartTest();\n        // test code with no reference to Test.StartTest() or Test.StopTest()\n        Test.StopTest();\n    }\n\n    static testmethod void myTestMethod2() {\n        // Preparing test (creating records, etc...)\n        Test.StartTest();\n        // test code with no reference to Test.StartTest() or Test.StopTest()\n        Test.StopTest();\n    }\n\n    static void myHelper() {\n        // ...\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eNo issue will be raised if the test class, i.e. the class annotated with \u003ccode\u003e@isTest\u003c/code\u003e, contains helper methods, i.e. methods not annotated\nwith \u003ccode\u003e@isTest\u003c/code\u003e or \u003ccode\u003etestmethod\u003c/code\u003e, which contain calls to \u003ccode\u003eTest.StartTest()\u003c/code\u003e or \u003ccode\u003eTest.StopTest()\u003c/code\u003e. This\nindicates that the test code has been factorised and the rule would raise false positives.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_gov_limits.htm\"\u003eExecution Governors and Limits\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_testing_tools_start_stop_test.htm\"\u003eUsing Limits,\n  startTest, and stopTest\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn order to protect shared resources, Salesforce enforces a maximum number of SOQL queries, DML queries, \u003ccode\u003e@future\u003c/code\u003e method, etc…​\nexecution inside a single \u003ca href\u003d\"https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_transaction.htm\"\u003etransaction\u003c/a\u003e.\nThis is part of \u003ca href\u003d\"https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_gov_limits.htm\"\u003eGovernor limits\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eEvery test method should check how close the tested code is to reach the governor limits. This is done by calling \u003ccode\u003eTest.StartTest()\u003c/code\u003e\nbefore the tested code and \u003ccode\u003eTest.StopTest()\u003c/code\u003e after it.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a test method, i.e. a method annotated with \u003ccode\u003e@isTest\u003c/code\u003e or \u003ccode\u003etestmethod\u003c/code\u003e, does not contain a call\nto \u003ccode\u003eTest.StartTest()\u003c/code\u003e and \u003ccode\u003eTest.StopTest()\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n@isTest()\npublic class MyTestClass {\n    @isTest()\n    static void myTestMethod() { // Noncompliant\n        // Preparing test (creating records, etc...)\n        // test code with no reference to Test.StartTest() or Test.StopTest()\n    }\n\n    static testmethod void myTestMethod2() { // Noncompliant\n        // Preparing test (creating records, etc...)\n        // test code with no reference to Test.StartTest() or Test.StopTest()\n    }\n\n    static void myHelper() {\n        // ...\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n@isTest()\npublic class MyTestClass {\n    @isTest()\n    static void myTestMethod() {\n        // Preparing test (creating records, etc...)\n        Test.StartTest();\n        // test code with no reference to Test.StartTest() or Test.StopTest()\n        Test.StopTest();\n    }\n\n    static testmethod void myTestMethod2() {\n        // Preparing test (creating records, etc...)\n        Test.StartTest();\n        // test code with no reference to Test.StartTest() or Test.StopTest()\n        Test.StopTest();\n    }\n\n    static void myHelper() {\n        // ...\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eNo issue will be raised if the test class, i.e. the class annotated with \u003ccode\u003e@isTest\u003c/code\u003e, contains helper methods, i.e. methods not annotated\nwith \u003ccode\u003e@isTest\u003c/code\u003e or \u003ccode\u003etestmethod\u003c/code\u003e, which contain calls to \u003ccode\u003eTest.StartTest()\u003c/code\u003e or \u003ccode\u003eTest.StopTest()\u003c/code\u003e. This\nindicates that the test code has been factorised and the rule would raise false positives.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_gov_limits.htm\"\u003eExecution Governors and Limits\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_testing_tools_start_stop_test.htm\"\u003eUsing Limits,\n  startTest, and stopTest\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "governor-limits"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "TEST",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eIn order to protect shared resources, Salesforce enforces a maximum number of SOQL queries, DML queries, \u003ccode\u003e@future\u003c/code\u003e method, etc…​\nexecution inside a single \u003ca href\u003d\"https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_transaction.htm\"\u003etransaction\u003c/a\u003e.\nThis is part of \u003ca href\u003d\"https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_gov_limits.htm\"\u003eGovernor limits\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eEvery test method should check how close the tested code is to reach the governor limits. This is done by calling \u003ccode\u003eTest.StartTest()\u003c/code\u003e\nbefore the tested code and \u003ccode\u003eTest.StopTest()\u003c/code\u003e after it.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a test method, i.e. a method annotated with \u003ccode\u003e@isTest\u003c/code\u003e or \u003ccode\u003etestmethod\u003c/code\u003e, does not contain a call\nto \u003ccode\u003eTest.StartTest()\u003c/code\u003e and \u003ccode\u003eTest.StopTest()\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n@isTest()\npublic class MyTestClass {\n    @isTest()\n    static void myTestMethod() { // Noncompliant\n        // Preparing test (creating records, etc...)\n        // test code with no reference to Test.StartTest() or Test.StopTest()\n    }\n\n    static testmethod void myTestMethod2() { // Noncompliant\n        // Preparing test (creating records, etc...)\n        // test code with no reference to Test.StartTest() or Test.StopTest()\n    }\n\n    static void myHelper() {\n        // ...\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n@isTest()\npublic class MyTestClass {\n    @isTest()\n    static void myTestMethod() {\n        // Preparing test (creating records, etc...)\n        Test.StartTest();\n        // test code with no reference to Test.StartTest() or Test.StopTest()\n        Test.StopTest();\n    }\n\n    static testmethod void myTestMethod2() {\n        // Preparing test (creating records, etc...)\n        Test.StartTest();\n        // test code with no reference to Test.StartTest() or Test.StopTest()\n        Test.StopTest();\n    }\n\n    static void myHelper() {\n        // ...\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eNo issue will be raised if the test class, i.e. the class annotated with \u003ccode\u003e@isTest\u003c/code\u003e, contains helper methods, i.e. methods not annotated\nwith \u003ccode\u003e@isTest\u003c/code\u003e or \u003ccode\u003etestmethod\u003c/code\u003e, which contain calls to \u003ccode\u003eTest.StartTest()\u003c/code\u003e or \u003ccode\u003eTest.StopTest()\u003c/code\u003e. This\nindicates that the test code has been factorised and the rule would raise false positives.\u003c/p\u003e"
                },
                {
                    "key": "resources",
                    "content": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_gov_limits.htm\"\u003eExecution Governors and Limits\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_testing_tools_start_stop_test.htm\"\u003eUsing Limits,\n  startTest, and stopTest\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "TESTED",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "apex:S1192",
            "repo": "apex",
            "name": "String literals should not be duplicated",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eDuplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.\u003c/p\u003e\n\u003cp\u003eOn the other hand, constants can be referenced from many places, but only need to be updated in a single place.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nclass A {\n    void doSomething(String msg) {\n        System.debug(\u0027string literal\u0027); // Noncompliant - \u0027string literal\u0027 is duplicated 3 times\n        System.assertEquals(msg, \u0027string literal\u0027);\n        msg \u003d \u0027string literal\u0027;\n    }\n\n    void doSomethingElse(String msg) {\n        System.debug(\u0027a\u0027); // Compliant - literal \u0027a\u0027 has less than 5 characters and is excluded\n        System.assertEquals(msg, \u0027a\u0027);\n        msg \u003d \u0027a\u0027;\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nclass A {\n    static final String STRING_CONST \u003d \u0027string literal\u0027;\n\n    void doSomething(String msg) {\n        System.debug(STRING_CONST); // Compliant\n        System.assertEquals(msg, STRING_CONST);\n        msg \u003d STRING_CONST;\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eTo prevent generating some false-positives, literals having 5 or less characters are excluded as well as literals containing only letters, digits\nand \u0027_\u0027.\u003c/p\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eDuplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.\u003c/p\u003e\n\u003cp\u003eOn the other hand, constants can be referenced from many places, but only need to be updated in a single place.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nclass A {\n    void doSomething(String msg) {\n        System.debug(\u0027string literal\u0027); // Noncompliant - \u0027string literal\u0027 is duplicated 3 times\n        System.assertEquals(msg, \u0027string literal\u0027);\n        msg \u003d \u0027string literal\u0027;\n    }\n\n    void doSomethingElse(String msg) {\n        System.debug(\u0027a\u0027); // Compliant - literal \u0027a\u0027 has less than 5 characters and is excluded\n        System.assertEquals(msg, \u0027a\u0027);\n        msg \u003d \u0027a\u0027;\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nclass A {\n    static final String STRING_CONST \u003d \u0027string literal\u0027;\n\n    void doSomething(String msg) {\n        System.debug(STRING_CONST); // Compliant\n        System.assertEquals(msg, STRING_CONST);\n        msg \u003d STRING_CONST;\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eTo prevent generating some false-positives, literals having 5 or less characters are excluded as well as literals containing only letters, digits\nand \u0027_\u0027.\u003c/p\u003e",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "design"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [
                {
                    "key": "threshold",
                    "htmlDesc": "Number of times a literal must be duplicated to trigger an issue",
                    "defaultValue": "3",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "LINEAR_OFFSET",
            "defaultDebtRemFnCoeff": "2min",
            "defaultDebtRemFnOffset": "2min",
            "effortToFixDescription": "per duplicate instance",
            "debtOverloaded": false,
            "debtRemFnType": "LINEAR_OFFSET",
            "debtRemFnCoeff": "2min",
            "debtRemFnOffset": "2min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "LINEAR_OFFSET",
            "defaultRemFnGapMultiplier": "2min",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "LINEAR_OFFSET",
            "remFnGapMultiplier": "2min",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "gapDescription": "per duplicate instance",
            "scope": "MAIN",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eDuplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.\u003c/p\u003e\n\u003cp\u003eOn the other hand, constants can be referenced from many places, but only need to be updated in a single place.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nclass A {\n    void doSomething(String msg) {\n        System.debug(\u0027string literal\u0027); // Noncompliant - \u0027string literal\u0027 is duplicated 3 times\n        System.assertEquals(msg, \u0027string literal\u0027);\n        msg \u003d \u0027string literal\u0027;\n    }\n\n    void doSomethingElse(String msg) {\n        System.debug(\u0027a\u0027); // Compliant - literal \u0027a\u0027 has less than 5 characters and is excluded\n        System.assertEquals(msg, \u0027a\u0027);\n        msg \u003d \u0027a\u0027;\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nclass A {\n    static final String STRING_CONST \u003d \u0027string literal\u0027;\n\n    void doSomething(String msg) {\n        System.debug(STRING_CONST); // Compliant\n        System.assertEquals(msg, STRING_CONST);\n        msg \u003d STRING_CONST;\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eTo prevent generating some false-positives, literals having 5 or less characters are excluded as well as literals containing only letters, digits\nand \u0027_\u0027.\u003c/p\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "DISTINCT",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "apex:S126",
            "repo": "apex",
            "name": "\"if ... else if\" constructs should end with \"else\" clauses",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThis rule applies whenever an \u003ccode\u003eif\u003c/code\u003e statement is followed by one or more \u003ccode\u003eelse if\u003c/code\u003e statements; the final \u003ccode\u003eelse if\u003c/code\u003e\nshould be followed by an \u003ccode\u003eelse\u003c/code\u003e statement.\u003c/p\u003e\n\u003cp\u003eThe requirement for a final \u003ccode\u003eelse\u003c/code\u003e statement is defensive programming.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eelse\u003c/code\u003e statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is\nconsistent with the requirement to have a final \u003ccode\u003edefault\u003c/code\u003e clause in a \u003ccode\u003eswitch\u003c/code\u003e statement.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif (x \u003d\u003d 0) {\n  doSomething();\n} else if (x \u003d\u003d 1) {\n  doSomethingElse();\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nif (x \u003d\u003d 0) {\n  doSomething();\n} else if (x \u003d\u003d 1) {\n  doSomethingElse();\n} else {\n  throw new MyException(\u0027Illegal state\u0027);\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eWhen all branches of an \u003ccode\u003eif\u003c/code\u003e-\u003ccode\u003eelse if\u003c/code\u003e end with \u003ccode\u003ereturn\u003c/code\u003e, \u003ccode\u003ebreak\u003c/code\u003e or \u003ccode\u003ethrow\u003c/code\u003e, the code that\ncomes after the \u003ccode\u003eif\u003c/code\u003e implicitly behaves as if it was in an \u003ccode\u003eelse\u003c/code\u003e clause. This rule will therefore ignore that case.\u003c/p\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThis rule applies whenever an \u003ccode\u003eif\u003c/code\u003e statement is followed by one or more \u003ccode\u003eelse if\u003c/code\u003e statements; the final \u003ccode\u003eelse if\u003c/code\u003e\nshould be followed by an \u003ccode\u003eelse\u003c/code\u003e statement.\u003c/p\u003e\n\u003cp\u003eThe requirement for a final \u003ccode\u003eelse\u003c/code\u003e statement is defensive programming.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eelse\u003c/code\u003e statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is\nconsistent with the requirement to have a final \u003ccode\u003edefault\u003c/code\u003e clause in a \u003ccode\u003eswitch\u003c/code\u003e statement.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif (x \u003d\u003d 0) {\n  doSomething();\n} else if (x \u003d\u003d 1) {\n  doSomethingElse();\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nif (x \u003d\u003d 0) {\n  doSomething();\n} else if (x \u003d\u003d 1) {\n  doSomethingElse();\n} else {\n  throw new MyException(\u0027Illegal state\u0027);\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eWhen all branches of an \u003ccode\u003eif\u003c/code\u003e-\u003ccode\u003eelse if\u003c/code\u003e end with \u003ccode\u003ereturn\u003c/code\u003e, \u003ccode\u003ebreak\u003c/code\u003e or \u003ccode\u003ethrow\u003c/code\u003e, the code that\ncomes after the \u003ccode\u003eif\u003c/code\u003e implicitly behaves as if it was in an \u003ccode\u003eelse\u003c/code\u003e clause. This rule will therefore ignore that case.\u003c/p\u003e",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eThis rule applies whenever an \u003ccode\u003eif\u003c/code\u003e statement is followed by one or more \u003ccode\u003eelse if\u003c/code\u003e statements; the final \u003ccode\u003eelse if\u003c/code\u003e\nshould be followed by an \u003ccode\u003eelse\u003c/code\u003e statement.\u003c/p\u003e\n\u003cp\u003eThe requirement for a final \u003ccode\u003eelse\u003c/code\u003e statement is defensive programming.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eelse\u003c/code\u003e statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is\nconsistent with the requirement to have a final \u003ccode\u003edefault\u003c/code\u003e clause in a \u003ccode\u003eswitch\u003c/code\u003e statement.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif (x \u003d\u003d 0) {\n  doSomething();\n} else if (x \u003d\u003d 1) {\n  doSomethingElse();\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nif (x \u003d\u003d 0) {\n  doSomething();\n} else if (x \u003d\u003d 1) {\n  doSomethingElse();\n} else {\n  throw new MyException(\u0027Illegal state\u0027);\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eWhen all branches of an \u003ccode\u003eif\u003c/code\u003e-\u003ccode\u003eelse if\u003c/code\u003e end with \u003ccode\u003ereturn\u003c/code\u003e, \u003ccode\u003ebreak\u003c/code\u003e or \u003ccode\u003ethrow\u003c/code\u003e, the code that\ncomes after the \u003ccode\u003eif\u003c/code\u003e implicitly behaves as if it was in an \u003ccode\u003eelse\u003c/code\u003e clause. This rule will therefore ignore that case.\u003c/p\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "HIGH"
                }
            ]
        },
        {
            "key": "apex:S5390",
            "repo": "apex",
            "name": "Messages should not be hardcoded",
            "createdAt": "2019-08-21T15:36:47+0200",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIts a best practice to avoid hardcoding of text strings in Apex. Ideally those text should be stored in a Custom Label and referenced via those in\nthe code. This enables administrators and translators to update the messages without modifying the code. It also enables the translation of those text\nin international organizations.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a call to the \u003ccode\u003esObject.addError\u003c/code\u003e method is given a hardcoded string.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class MyClass{\n    public static myMethod(Case mycase) {\n        mycase.addError(\u0027This is a hardcoded error\u0027);\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class MyClass{\n    public static myMethod(Case case) {\n        mycase.addError(System.Label.caseErrorMessage);\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://help.salesforce.com/articleView?id\u003dcl_about.htm\u0026amp;type\u003d5\"\u003eCustom Labels\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.salesforce.com/docs/atlas.en-us.198.0.apexcode.meta/apexcode/apex_methods_system_sobject.htm\"\u003esObject Class\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIts a best practice to avoid hardcoding of text strings in Apex. Ideally those text should be stored in a Custom Label and referenced via those in\nthe code. This enables administrators and translators to update the messages without modifying the code. It also enables the translation of those text\nin international organizations.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a call to the \u003ccode\u003esObject.addError\u003c/code\u003e method is given a hardcoded string.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class MyClass{\n    public static myMethod(Case mycase) {\n        mycase.addError(\u0027This is a hardcoded error\u0027);\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class MyClass{\n    public static myMethod(Case case) {\n        mycase.addError(System.Label.caseErrorMessage);\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://help.salesforce.com/articleView?id\u003dcl_about.htm\u0026amp;type\u003d5\"\u003eCustom Labels\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.salesforce.com/docs/atlas.en-us.198.0.apexcode.meta/apexcode/apex_methods_system_sobject.htm\"\u003esObject Class\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eIts a best practice to avoid hardcoding of text strings in Apex. Ideally those text should be stored in a Custom Label and referenced via those in\nthe code. This enables administrators and translators to update the messages without modifying the code. It also enables the translation of those text\nin international organizations.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a call to the \u003ccode\u003esObject.addError\u003c/code\u003e method is given a hardcoded string.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class MyClass{\n    public static myMethod(Case mycase) {\n        mycase.addError(\u0027This is a hardcoded error\u0027);\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class MyClass{\n    public static myMethod(Case case) {\n        mycase.addError(System.Label.caseErrorMessage);\n    }\n}\n\u003c/pre\u003e"
                },
                {
                    "key": "resources",
                    "content": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://help.salesforce.com/articleView?id\u003dcl_about.htm\u0026amp;type\u003d5\"\u003eCustom Labels\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.salesforce.com/docs/atlas.en-us.198.0.apexcode.meta/apexcode/apex_methods_system_sobject.htm\"\u003esObject Class\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "MODULAR",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "apex:S1764",
            "repo": "apex",
            "name": "Identical expressions should not be used on both sides of a binary operator",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUsing the same value on both sides of a binary operator is a code defect. In the case of logical operators, it is either a copy/paste error and,\ntherefore, a bug, or it is simply duplicated code and should be simplified. In the case of bitwise operators and most binary mathematical operators,\nhaving the same value on both sides of an operator yields predictable results and should be simplified as well.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif ( a \u003d\u003d a ) { // always true\n  foo();\n}\nif ( a !\u003d a ) { // always false\n  foo();\n}\nif ( a \u003d\u003d b \u0026amp;\u0026amp; a \u003d\u003d b ) { // if the first one is true, the second one is too\n  foo();\n}\nif ( a !\u003d b || a \u0026lt;\u0026gt; b ) { // if the first one is true, the second one is too\n  foo();\n}\n\nInteger i \u003d 5 / 5; // always 1\nInteger j \u003d 5 - 5; // always 0\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e This rule ignores \u003ccode\u003e*\u003c/code\u003e, \u003ccode\u003e+\u003c/code\u003e, \u003ccode\u003e^\u003c/code\u003e, \u003ccode\u003e\u0026amp;\u003c/code\u003e, \u003ccode\u003e|\u003c/code\u003e, \u003ccode\u003e\u003d\u003c/code\u003e, \u003ccode\u003e\u0026lt;\u0026lt;\u003c/code\u003e,\n  \u003ccode\u003e\u0026gt;\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\u0027/organizations/microsoft/rules?open\u003dapex%3AS1656\u0026rule_key\u003dapex%3AS1656\u0027\u003eS1656\u003c/a\u003e - Implements a check on \u003ccode\u003e\u003d\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUsing the same value on both sides of a binary operator is a code defect. In the case of logical operators, it is either a copy/paste error and,\ntherefore, a bug, or it is simply duplicated code and should be simplified. In the case of bitwise operators and most binary mathematical operators,\nhaving the same value on both sides of an operator yields predictable results and should be simplified as well.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif ( a \u003d\u003d a ) { // always true\n  foo();\n}\nif ( a !\u003d a ) { // always false\n  foo();\n}\nif ( a \u003d\u003d b \u0026amp;\u0026amp; a \u003d\u003d b ) { // if the first one is true, the second one is too\n  foo();\n}\nif ( a !\u003d b || a \u0026lt;\u0026gt; b ) { // if the first one is true, the second one is too\n  foo();\n}\n\nInteger i \u003d 5 / 5; // always 1\nInteger j \u003d 5 - 5; // always 0\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e This rule ignores \u003ccode\u003e*\u003c/code\u003e, \u003ccode\u003e+\u003c/code\u003e, \u003ccode\u003e^\u003c/code\u003e, \u003ccode\u003e\u0026amp;\u003c/code\u003e, \u003ccode\u003e|\u003c/code\u003e, \u003ccode\u003e\u003d\u003c/code\u003e, \u003ccode\u003e\u0026lt;\u0026lt;\u003c/code\u003e,\n  \u003ccode\u003e\u0026gt;\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:apex:S1656} - Implements a check on \u003ccode\u003e\u003d\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "type": "BUG",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "resources",
                    "content": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\u0027/organizations/microsoft/rules?open\u003dapex%3AS1656\u0026rule_key\u003dapex%3AS1656\u0027\u003eS1656\u003c/a\u003e - Implements a check on \u003ccode\u003e\u003d\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e"
                },
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eUsing the same value on both sides of a binary operator is a code defect. In the case of logical operators, it is either a copy/paste error and,\ntherefore, a bug, or it is simply duplicated code and should be simplified. In the case of bitwise operators and most binary mathematical operators,\nhaving the same value on both sides of an operator yields predictable results and should be simplified as well.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif ( a \u003d\u003d a ) { // always true\n  foo();\n}\nif ( a !\u003d a ) { // always false\n  foo();\n}\nif ( a \u003d\u003d b \u0026amp;\u0026amp; a \u003d\u003d b ) { // if the first one is true, the second one is too\n  foo();\n}\nif ( a !\u003d b || a \u0026lt;\u0026gt; b ) { // if the first one is true, the second one is too\n  foo();\n}\n\nInteger i \u003d 5 / 5; // always 1\nInteger j \u003d 5 - 5; // always 0\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e This rule ignores \u003ccode\u003e*\u003c/code\u003e, \u003ccode\u003e+\u003c/code\u003e, \u003ccode\u003e^\u003c/code\u003e, \u003ccode\u003e\u0026amp;\u003c/code\u003e, \u003ccode\u003e|\u003c/code\u003e, \u003ccode\u003e\u003d\u003c/code\u003e, \u003ccode\u003e\u0026lt;\u0026lt;\u003c/code\u003e,\n  \u003ccode\u003e\u0026gt;\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "LOGICAL",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "RELIABILITY",
                    "severity": "MEDIUM"
                }
            ]
        },
        {
            "key": "apex:S1125",
            "repo": "apex",
            "name": "Boolean literals should not be redundant",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eRedundant Boolean literals should be removed from expressions to improve readability.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() \u0026amp;\u0026amp; true);\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\n\u003c/pre\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eRedundant Boolean literals should be removed from expressions to improve readability.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() \u0026amp;\u0026amp; true);\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\n\u003c/pre\u003e",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eRedundant Boolean literals should be removed from expressions to improve readability.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() \u0026amp;\u0026amp; true);\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\n\u003c/pre\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "CONVENTIONAL",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "apex:S101",
            "repo": "apex",
            "name": "Class names should comply with a naming convention",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eShared naming conventions allow teams to collaborate efficiently.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a class name does not match a provided regular expression.\u003c/p\u003e\n\u003cp\u003eFor example, with the default provided regular expression \u003ccode\u003e^[A-Z][a-zA-Z0-9]*$\u003c/code\u003e, the class:\u003c/p\u003e\n\u003cpre\u003e\nclass myClass {} // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eshould be renamed to\u003c/p\u003e\n\u003cpre\u003e\nclass MyClass {}\n\u003c/pre\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eShared naming conventions allow teams to collaborate efficiently.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a class name does not match a provided regular expression.\u003c/p\u003e\n\u003cp\u003eFor example, with the default provided regular expression \u003ccode\u003e^[A-Z][a-zA-Z0-9]*$\u003c/code\u003e, the class:\u003c/p\u003e\n\u003cpre\u003e\nclass myClass {} // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eshould be renamed to\u003c/p\u003e\n\u003cpre\u003e\nclass MyClass {}\n\u003c/pre\u003e",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [
                {
                    "key": "format",
                    "htmlDesc": "Regular expression used to check the class names against.",
                    "defaultValue": "^[A-Z][a-zA-Z0-9_]*$",
                    "type": "STRING"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eShared naming conventions allow teams to collaborate efficiently.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a class name does not match a provided regular expression.\u003c/p\u003e\n\u003cp\u003eFor example, with the default provided regular expression \u003ccode\u003e^[A-Z][a-zA-Z0-9]*$\u003c/code\u003e, the class:\u003c/p\u003e\n\u003cpre\u003e\nclass myClass {} // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eshould be renamed to\u003c/p\u003e\n\u003cpre\u003e\nclass MyClass {}\n\u003c/pre\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "IDENTIFIABLE",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "apex:S100",
            "repo": "apex",
            "name": "Function names should comply with a naming convention",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eShared naming conventions allow teams to collaborate efficiently.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a function name does not match a provided regular expression.\u003c/p\u003e\n\u003cp\u003eFor example, with the default provided regular expression \u003ccode\u003e^[a-z][a-zA-Z0-9_]*$\u003c/code\u003e, the function:\u003c/p\u003e\n\u003cpre\u003e\npublic void DoSomething(){...} // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eshould be renamed to\u003c/p\u003e\n\u003cpre\u003e\npublic void doSomething(){...}\n\u003c/pre\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eShared naming conventions allow teams to collaborate efficiently.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a function name does not match a provided regular expression.\u003c/p\u003e\n\u003cp\u003eFor example, with the default provided regular expression \u003ccode\u003e^[a-z][a-zA-Z0-9_]*$\u003c/code\u003e, the function:\u003c/p\u003e\n\u003cpre\u003e\npublic void DoSomething(){...} // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eshould be renamed to\u003c/p\u003e\n\u003cpre\u003e\npublic void doSomething(){...}\n\u003c/pre\u003e",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [
                {
                    "key": "format",
                    "htmlDesc": "Regular expression used to check the function names against.",
                    "defaultValue": "^[a-z][a-zA-Z0-9_]*$",
                    "type": "STRING"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eShared naming conventions allow teams to collaborate efficiently.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a function name does not match a provided regular expression.\u003c/p\u003e\n\u003cp\u003eFor example, with the default provided regular expression \u003ccode\u003e^[a-z][a-zA-Z0-9_]*$\u003c/code\u003e, the function:\u003c/p\u003e\n\u003cpre\u003e\npublic void DoSomething(){...} // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eshould be renamed to\u003c/p\u003e\n\u003cpre\u003e\npublic void doSomething(){...}\n\u003c/pre\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "IDENTIFIABLE",
            "cleanCodeAttributeCategory": "CONSISTENT",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "apex:S1481",
            "repo": "apex",
            "name": "Unused local variables should be removed",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIf a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic Integer numberOfMinutes(Integer hours) {\n  Integer seconds \u003d 0;   // seconds is never used\n  return hours * 60;\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic Integer numberOfMinutes(Integer hours) {\n  return hours * 60;\n}\n\u003c/pre\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIf a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic Integer numberOfMinutes(Integer hours) {\n  Integer seconds \u003d 0;   // seconds is never used\n  return hours * 60;\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic Integer numberOfMinutes(Integer hours) {\n  return hours * 60;\n}\n\u003c/pre\u003e",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "unused"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "ALL",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eIf a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic Integer numberOfMinutes(Integer hours) {\n  Integer seconds \u003d 0;   // seconds is never used\n  return hours * 60;\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic Integer numberOfMinutes(Integer hours) {\n  return hours * 60;\n}\n\u003c/pre\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "CLEAR",
            "cleanCodeAttributeCategory": "INTENTIONAL",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "LOW"
                }
            ]
        },
        {
            "key": "apex:S138",
            "repo": "apex",
            "name": "Functions should not have too many lines of code",
            "createdAt": "2018-12-07T11:54:29+0100",
            "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA function that grows too large tends to aggregate too many responsibilities.\u003c/p\u003e\n\u003cp\u003eSuch functions inevitably become harder to understand and therefore harder to maintain.\u003c/p\u003e\n\u003cp\u003eAbove a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.\u003c/p\u003e\n\u003cp\u003eThose smaller functions will not only be easier to understand, but also probably easier to test.\u003c/p\u003e",
            "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA function that grows too large tends to aggregate too many responsibilities.\u003c/p\u003e\n\u003cp\u003eSuch functions inevitably become harder to understand and therefore harder to maintain.\u003c/p\u003e\n\u003cp\u003eAbove a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.\u003c/p\u003e\n\u003cp\u003eThose smaller functions will not only be easier to understand, but also probably easier to test.\u003c/p\u003e",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "brain-overload"
            ],
            "lang": "apex",
            "langName": "Apex",
            "params": [
                {
                    "key": "max",
                    "htmlDesc": "Maximum authorized lines of code in a function",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "type": "CODE_SMELL",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "descriptionSections": [
                {
                    "key": "root_cause",
                    "content": "\u003cp\u003eA function that grows too large tends to aggregate too many responsibilities.\u003c/p\u003e\n\u003cp\u003eSuch functions inevitably become harder to understand and therefore harder to maintain.\u003c/p\u003e\n\u003cp\u003eAbove a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.\u003c/p\u003e\n\u003cp\u003eThose smaller functions will not only be easier to understand, but also probably easier to test.\u003c/p\u003e"
                }
            ],
            "educationPrinciples": [],
            "cleanCodeAttribute": "FOCUSED",
            "cleanCodeAttributeCategory": "ADAPTABLE",
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY",
                    "severity": "MEDIUM"
                }
            ]
        }
    ]
}