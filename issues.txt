# 按照时间推移的瞬息，我在写这个文档的时候测试了7次，具体情况需要自己核对一下。

# 我public的repo的commit message落后于sonarcloud上一个时间戳，所以在github上显示是7，但本质在sonarcloud已经测试8次了
link：https://github.com/TinyyTomato/sonarcloud_test4zzy.git

1 为什么如果a!=b为真是会报错bug？我感觉如果是为了测试或者是assertion的方法用了判断的不等式，那我觉得这个bug就是不合理的？
比如我目前只有一个模型，我后续会加入新的模型，但目前只有一个通道，但我这里必须写if判断来判断我当前用的模型是什么？
那我或许觉得这个a!=b就是不合适的（Remove this expression which always evaluates to "true". Boolean expressions should not be gratuitous）

1.5 如果本身a!=b这段代码会导致bug或者code smell,那么如果将a和b换成其他的变量名也是相同的效果。我这里单纯做的就是将原来的a和b名字改成了c和d，但我觉得这个具体还是得看代码的作用，sonarcloud是真的在分析代码，而不是在胡乱搞。

2  find all the test results for a certain object, please use the api/ce/activity?component=ProjectKey:
https://sonarcloud.io/api/ce/activity?component=TinyyTomato_sonarcloud_test4zzy

在 activity.json 中:
tasks 就是latest activity模块+older activity模块（注意，最新一次的测试如果是passed，那就不会在数据库中记录？因为我最后一次passed的代码不是latest activity中的第一条，很奇怪）
我自己的字段中没有 "hasErrorStacktrace": false,
logs==false好像就是正常的，不用担心
status 描述的是 此次测试是否成功
executionTimeMs 描述的是测试时间 Ms
warningCount 描述的就是warnings，但warnings列表里面的内容可能为空？？我不知道是为什么（我这里为空的原因是没有配置好sonarclouds上python的测试环境之类的？我不是很懂是什么意思）

3 没有找到我导入的库是有问题的：
import panadas as pd
panadas拼错了，但没有说这个有问题（就是好像不管import的信息的对错，很奇怪？？？）

4 采用下述url request就能获得一个项目（根据project_key确定）的所有历史测试信息
https://sonarcloud.io/api/issues/search?projects=TinyyTomato_sonarcloud_test4zzy（这里换成自己的project_key）
(3)	获取问题的描述，如重要性（severity）、修改情况（对于每个issue的fix信息）等（其中上述获取的json文件结果是按照时间排序的(倒叙排列，不过和sonarcloud上的相同，就是最新的在最上面，最老的测试在最下面)，所以可以和所有的commit_id一一对应上）

我不知道这个sonarcloud中对于closed的评判标准是什么，感觉是有点奇怪的，因为我中间测试的代码居然也给我显示了closed，不大合理啊！！！！（或许这就是研究的意义？？哪些是真正的closed，哪些不是？？？）

对于fix信息来说，"resolution": "FIXED", // 我没有set过这个fixed信息，所以我觉得是automatically完成的（至于论文中说的resolved我忘记在哪里看到过了，但issues.json里面没有）
                "status": "open", "CLOSED", //set automatically by sonarcloud
"issues": [
        {
            "key": "AYya5JtL4X35g3GUvaVD", //没用
            "rule": "python:S1854", //有用。可以通过下述url requst 搜索到规则的具体信息 # https://sonarcloud.io/api/rules/search?rule_key=python:S1854（这里更换成你遇到的rule信息）&organization=tinyytomato（这里更换成你测试项目的organization信息）
            # Attention: 上述的attention是指：某个项目某次测试违反的规则，并不是该项目配置的规则
            "severity": "MAJOR", //有用
            "component": "TinyyTomato_sonarcloud_test4zzy:test.py", //有用，知道github's repo名字+修改的是哪个文件（这里没有显示文件夹的原因是.py文件就在最外层，如果有文件夹嵌套那就应该类似于：/code/test.py）
            "project": "TinyyTomato_sonarcloud_test4zzy", //有用
            "hash": "1e4757a23581ae8bee81560dd428f8d8", //没用，这个不是github的commit_id，是sonarcloud的
            "textRange": { //有用？确定修改的代码行
                "startLine": 19,
                "endLine": 19,
                "startOffset": 4,
                "endOffset": 9
            },
            "flows": [], //不知道是什么东西
            "resolution": "FIXED", //疑问？我不是特别清楚
            "status": "CLOSED", //有用
            "message": "Remove this assignment to local variable \u0027t\u0027; the value is never used.", //有用。这message属性是自动生成的（由sonarcloud提供），解释了此次代码更改（code changes）的自然语言信息（正确解析之后的句子意思：移除对本地变量 't' 的赋值；该值从未被使用。）
            "effort": "1min", //看着没用
            "debt": "1min", //看着没用
            "assignee": "TinyyTomato@github", //看着没用（又不找人）
            "author": "1872401992@qq.com", //看着没用（也不发联系人邮箱吧）
            //这个tags代表了我此次测试的标签吧（具体查看web_api中：get api/issues/tags中的内容，有以下几个选项："tags": ["convention", "security", "cwe"]），不过我不清楚什么是unused。不过我实在没搞懂为什么会出现cwe，难道这个也能被attackers利用从而攻击？？（随便说说）
            "tags": [
                "cwe",
                "unused"
            ],
            "creationDate": "2023-12-24T09:15:12+0100", //字面意思，有用。是sonarcloud上此项目的创建时间
            "updateDate": "2023-12-24T09:19:20+0100", //字面意思，有用。是sonarcloud上此项目的更新时间
            "closeDate": "2023-12-24T09:19:20+0100", //字面意思，有用。是sonarcloud上此项目的closed时间
            "type": "CODE_SMELL", //有用
            "organization": "tinyytomato", //用户所属的organization，不知道有没有用
            "cleanCodeAttribute": "LOGICAL", //不知道是什么意思（字面意思很奇怪啊？？），还遇到过CLEAR信息，我有点点迷惑，或许需要再研究看看？
            "cleanCodeAttributeCategory": "INTENTIONAL", //不知道什么意思（字面意思很奇怪啊？？），我测试的代码都是 intentional，原因也很简单，就是因为我的代码有问题的地方都是在于我的if判断只走一条路，所以是这个代码指向性的问题
            "impacts": [
                {
                    "softwareQuality": "MAINTAINABILITY", //有用
                    "severity": "MEDIUM" //有用
                }
            ]
        }
    ]

有的时候可能会有：
"flows": [
                {
                    "locations": [
                        {
                            "component": "TinyyTomato_sonarcloud_test4zzy:test.py",
                            "textRange": {
                                "startLine": 15,
                                "endLine": 15,
                                "startOffset": 8,
                                "endOffset": 21
                            },
                            "msg": "Unreachable code"
                        }
                    ]
                }
            ],
我没搞懂这个flows是什么意思，但msg确实是真的，和外面的message是一个效果。

想要获取项目的具体代码建议通过步骤2中的activity获取项目的github名字（componentKey），然后直接通过github获取。
或者就是通过sonarcloud获取，用之前SVCP4C（一篇论文，github地址：https://github.com/uleroboticsgroup/SVCP4C）的代码，但是要注意限制：代码不能太长，即不能超过最大规定“页码”（未尝试），不然的话需要分页获取，还挺麻烦的感觉。

5 采用下述url request感觉是没有任何用处的，感觉没有可以分析的信息，不过字段名字倒是很真？？不确定的话，可以再看下（有几个字段我感觉有用但好像我不知道是什么意思：events，projectVersion，revision(特别是这个)）
https://sonarcloud.io/api/project_analyses/search?project=TinyyTomato_sonarcloud_test4zzy

6 规则的fix信息如何查看以及历史的演变？？（以vscode-python项目为例子）
1）没用：GET api/qualityprofiles/backup：以 XML 形式备份质量配置文件。 导出的配置文件可以通过 api/qualityprofiles/restore 恢复。
提示：2）和3）需要用到测试项目的information信息（在每个测试项目的左下角），示例：
Quality profiles used
    JSON       SonarQube Way
    Python     Sonar way
    TypeScript Sonar way
2）无敌有用：GET api/qualityprofiles/changelog：获取质量配置文件的更改历史记录：规则激活/停用、参数/严重性更改。 事件按日期降序排列（最近的在前）。
两个例子，注意qualityProfile=后面字段的大小写问题！！：
https://sonarcloud.io/api/qualityprofiles/changelog?qualityProfile=SonarQube%20Way&language=json&organization=microsoft
https://sonarcloud.io/api/qualityprofiles/changelog?qualityProfile=Sonar%20way&language=py&organization=microsoft
3）感觉没用吧？：GET api/qualityprofiles/export：导出质量配置文件。
eg：
https://sonarcloud.io/api/qualityprofiles/export?qualityProfile=SonarQube%20Way&language=json&organization=microsoft，导出如下：
该 XML 文件并未包含任何关联的样式信息。文档树显示如下。
<profile>
<name>SonarQube Way</name>
<language>json</language>
<rules/>
</profile>

但我感觉这个api应该不是很重要，感觉用不到，对吗？

4）感觉没用吧？：GET api/qualityprofiles/exporters：列出可用的配置文件导出格式。（感觉对于自动化爬取项目是有用的，但我感觉导出的结果是不符合预期的，同时有些结果我不是很看得懂为什么会出现）
eg:
https://sonarcloud.io/api/qualityprofiles/exporters?organization=microsoft

但我感觉这个api应该不是很重要，感觉用不到，对吗？

5）没用？：GET api/qualityprofiles/importers：
eg：
https://sonarcloud.io/api/qualityprofiles/importers?organization=microsoft
（返回结果是空）

但我感觉这个api应该不是很重要，感觉用不到，对吗？

6）感觉没用吧？：GET api/qualityprofiles/inheritance：显示祖先和孩子的品质档案。
eg:
https://sonarcloud.io/api/qualityprofiles/inheritance?qualityProfile=Sonar%20way&language=py&organization=microsoft

7）没用吧？：GET api/qualityprofiles/projects：列出项目及其关于质量概况的关联状态
eg:
https://sonarcloud.io/api/qualityprofiles/projects?key=AWiVr-jnwLm-hKbaiLms（根据qualityprofiles_search.json中的key关键字进行替换即可）&organization=microsoft

8）无敌有用？：GET api/qualityprofiles/search：搜索质量档案
eg:
https://sonarcloud.io/api/qualityprofiles/search?organization=microsoft

9）无敌有用？：GET api/rules/show：Get detailed information about a rule.
eg:
https://sonarcloud.io/api/rules/show?key=python:S1854&organization=microsoft
配合api_issues_searchprojects.json中的rule字段食用，key=rule，organization替换成自己想要搜索的
但我感觉这是对一个特定规则的阐述，好像不是某个rule的细节rule，是细节rule的explanation（我自己的理解）

10）无敌有用：GET api/rules/search：Search for a collection of relevant rules matching a specified query.
eg:
https://sonarcloud.io/api/rules/search?avtivation=true（不要改这里，保持不动）&organization=microsoft&qprofile=AWiVr-jnwLm-hKbaiLmd（结合qualitprofiles_search.json中的key信息进行替换）

11）可以进行筛选，应该有用：GET api/rules/repositories：List available rule repositories
eg:
https://sonarcloud.io/api/rules/repositories?organization=microsoft


7 获取项目的不同版本的质量指标（measurements）
https://sonarcloud.io/api/measures/component?componentKey=TinyyTomato_sonarcloud_test4zzy（换成自己的componentKey，见上2）&metricKeys=ncloc,complexity,violations（metrics肯定不止只三个，我随便试了一个vulnerabilities就是对的，code_smells，bugs也是如此，所以我猜测一些传统的metrics都是存在的，那么请根据自己的需要修改对应的请求metrics）
但需要注意的是，上述请求的方式是获取了当前最新的measurements的情况（别问我是怎么知道的），那么如果需要获取所有历史版本的情况，请使用下述url：
https://sonarcloud.io/api/measures/search_history?component=TinyyTomato_sonarcloud_test4zzy（换成自己的componentKey，见上2）&metrics=ncloc,complexity,violations,vulnerabilities,code_smells,bugs

有用必定有用，无敌有用必定有用但不一定无敌，没用？大概率是没用，感觉没用吧？表示不确定，可能有联动的效果。
