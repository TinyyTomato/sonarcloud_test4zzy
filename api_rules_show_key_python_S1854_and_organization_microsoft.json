{
    "rule": {
        "key": "python:S1854",
        "repo": "python",
        "name": "Unused assignments should be removed",
        "createdAt": "2019-11-18T08:57:29+0100",
        "htmlDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eDead stores refer to assignments made to local variables that are subsequently never used or immediately overwritten. Such assignments are\nunnecessary and don’t contribute to the functionality or clarity of the code. They may even negatively impact performance. Removing them enhances code\ncleanliness and readability. Even if the unnecessary operations do not do any harm in terms of the program’s correctness, they are - at best - a waste\nof computing resources.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule ignores initializations to \u003ccode\u003e-1\u003c/code\u003e, \u003ccode\u003e0\u003c/code\u003e, \u003ccode\u003e1\u003c/code\u003e, \u003ccode\u003eNone\u003c/code\u003e, \u003ccode\u003eTrue\u003c/code\u003e, \u003ccode\u003eFalse\u003c/code\u003e and\n\u003ccode\u003e\"\"\u003c/code\u003e. No issue will be raised on unpacked variables.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eRemove the unnecesarry assignment, then test the code to make sure that the right-hand side of a given assignment had no side effects (e.g. a\nmethod that writes certain data to a file and returns the number of written bytes).\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\ndef func(a, b, compute):\n    i \u003d a + b  # Noncompliant; calculation result not used before value is overwritten\n    i \u003d compute()\n    return i\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\ndef func(a, b, compute):\n    i \u003d a + b\n    i +\u003d compute()\n    return i\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/563\"\u003e563 - Assignment to Variable without Use (\u0027Unused Variable\u0027)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eRelated rules\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\u0027/organizations/microsoft/rules?open\u003dpython%3AS1763\u0026rule_key\u003dpython%3AS1763\u0027\u003eS1763\u003c/a\u003e - All code should be reachable \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\u0027/organizations/microsoft/rules?open\u003dpython%3AS3516\u0026rule_key\u003dpython%3AS3516\u0027\u003eS3516\u003c/a\u003e - Functions returns should not be invariant \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\u0027/organizations/microsoft/rules?open\u003dpython%3AS3626\u0026rule_key\u003dpython%3AS3626\u0027\u003eS3626\u003c/a\u003e - Jump statements should not be redundant \u003c/li\u003e\n\u003c/ul\u003e",
        "mdDesc": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eDead stores refer to assignments made to local variables that are subsequently never used or immediately overwritten. Such assignments are\nunnecessary and don’t contribute to the functionality or clarity of the code. They may even negatively impact performance. Removing them enhances code\ncleanliness and readability. Even if the unnecessary operations do not do any harm in terms of the program’s correctness, they are - at best - a waste\nof computing resources.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule ignores initializations to \u003ccode\u003e-1\u003c/code\u003e, \u003ccode\u003e0\u003c/code\u003e, \u003ccode\u003e1\u003c/code\u003e, \u003ccode\u003eNone\u003c/code\u003e, \u003ccode\u003eTrue\u003c/code\u003e, \u003ccode\u003eFalse\u003c/code\u003e and\n\u003ccode\u003e\"\"\u003c/code\u003e. No issue will be raised on unpacked variables.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eRemove the unnecesarry assignment, then test the code to make sure that the right-hand side of a given assignment had no side effects (e.g. a\nmethod that writes certain data to a file and returns the number of written bytes).\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\ndef func(a, b, compute):\n    i \u003d a + b  # Noncompliant; calculation result not used before value is overwritten\n    i \u003d compute()\n    return i\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\ndef func(a, b, compute):\n    i \u003d a + b\n    i +\u003d compute()\n    return i\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/563\"\u003e563 - Assignment to Variable without Use (\u0027Unused Variable\u0027)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eRelated rules\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:python:S1763} - All code should be reachable \u003c/li\u003e\n  \u003cli\u003e {rule:python:S3516} - Functions returns should not be invariant \u003c/li\u003e\n  \u003cli\u003e {rule:python:S3626} - Jump statements should not be redundant \u003c/li\u003e\n\u003c/ul\u003e",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "unused"
        ],
        "lang": "py",
        "langName": "Python",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "1min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "1min",
        "type": "CODE_SMELL",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "1min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "1min",
        "remFnOverloaded": false,
        "scope": "ALL",
        "isExternal": false,
        "descriptionSections": [
            {
                "key": "root_cause",
                "content": "\u003cp\u003eDead stores refer to assignments made to local variables that are subsequently never used or immediately overwritten. Such assignments are\nunnecessary and don’t contribute to the functionality or clarity of the code. They may even negatively impact performance. Removing them enhances code\ncleanliness and readability. Even if the unnecessary operations do not do any harm in terms of the program’s correctness, they are - at best - a waste\nof computing resources.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule ignores initializations to \u003ccode\u003e-1\u003c/code\u003e, \u003ccode\u003e0\u003c/code\u003e, \u003ccode\u003e1\u003c/code\u003e, \u003ccode\u003eNone\u003c/code\u003e, \u003ccode\u003eTrue\u003c/code\u003e, \u003ccode\u003eFalse\u003c/code\u003e and\n\u003ccode\u003e\"\"\u003c/code\u003e. No issue will be raised on unpacked variables.\u003c/p\u003e"
            },
            {
                "key": "how_to_fix",
                "content": "\u003cp\u003eRemove the unnecesarry assignment, then test the code to make sure that the right-hand side of a given assignment had no side effects (e.g. a\nmethod that writes certain data to a file and returns the number of written bytes).\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\ndef func(a, b, compute):\n    i \u003d a + b  # Noncompliant; calculation result not used before value is overwritten\n    i \u003d compute()\n    return i\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\ndef func(a, b, compute):\n    i \u003d a + b\n    i +\u003d compute()\n    return i\n\u003c/pre\u003e"
            },
            {
                "key": "resources",
                "content": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/563\"\u003e563 - Assignment to Variable without Use (\u0027Unused Variable\u0027)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eRelated rules\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\u0027/organizations/microsoft/rules?open\u003dpython%3AS1763\u0026rule_key\u003dpython%3AS1763\u0027\u003eS1763\u003c/a\u003e - All code should be reachable \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\u0027/organizations/microsoft/rules?open\u003dpython%3AS3516\u0026rule_key\u003dpython%3AS3516\u0027\u003eS3516\u003c/a\u003e - Functions returns should not be invariant \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\u0027/organizations/microsoft/rules?open\u003dpython%3AS3626\u0026rule_key\u003dpython%3AS3626\u0027\u003eS3626\u003c/a\u003e - Jump statements should not be redundant \u003c/li\u003e\n\u003c/ul\u003e"
            }
        ],
        "educationPrinciples": [],
        "cleanCodeAttribute": "LOGICAL",
        "cleanCodeAttributeCategory": "INTENTIONAL",
        "impacts": [
            {
                "softwareQuality": "MAINTAINABILITY",
                "severity": "MEDIUM"
            }
        ]
    },
    "actives": []
}